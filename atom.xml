<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>akathink&#39;s blog</title>
  <subtitle>AkaThink</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://akathink.com/"/>
  <updated>2016-08-12T08:22:48.000Z</updated>
  <id>http://akathink.com/</id>
  
  <author>
    <name>LiuQingJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>彻底搞懂Java反射Reflect</title>
    <link href="http://akathink.com/2016/08/12/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Java%E5%8F%8D%E5%B0%84Reflect/"/>
    <id>http://akathink.com/2016/08/12/彻底搞懂Java反射Reflect/</id>
    <published>2016-08-12T01:31:26.000Z</published>
    <updated>2016-08-12T08:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>在了解反射之前，我们首先了解一下Class和Object：</p>
<ul>
<li>Class： 所有类的根源,是整个Java反射机制的源头。</li>
<li>Object：所有对象的根源。</li>
</ul>
<h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><h2 id="Class类的作用"><a href="#Class类的作用" class="headerlink" title="Class类的作用"></a>Class类的作用</h2><ul>
<li>在运行时判断任意一个对象所属的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类所具有的成员变量和方法</li>
<li>在运行时调用任意一个对象的方法</li>
<li>生成动态代理</li>
</ul>
<h2 id="Class类的使用"><a href="#Class类的使用" class="headerlink" title="Class类的使用"></a>Class类的使用</h2><p>本次通过代码＋注释来驱动讲解Java的反射知识，这样比纯文字描述了解的要快而且记得牢的多：</p>
<p>首先，创建一个类AkaThinkBook.java 供验证反射机制使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.reflect;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * 本类提供了两个字段、两个构造方法、五个普通方法，供验证反射机制使用</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AkaThinkBook</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String bookName;</div><div class="line">	<span class="keyword">private</span> String bookAuthor;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AkaThinkBook</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AkaThinkBook</span><span class="params">(String bookName, String bookAuthor)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.bookName = bookName;</div><div class="line">		<span class="keyword">this</span>.bookAuthor = bookAuthor;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> bookName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.bookName = bookName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getBookAuthor</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> bookAuthor;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookAuthor</span><span class="params">(String bookAuthor)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.bookAuthor = bookAuthor;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBookInfo</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"AkaThink即将出版的《音画》APP为您提供优质的音画作品，带给您美的享受！"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次，定义一个ClassUtil.java 来帮助我们打印一些日志信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.reflect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtil</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 打印对象的字段信息</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> object</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFieldMsg</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"\n\n下面打印的是对象的    字段    信息：\n"</span>);</div><div class="line"></div><div class="line">		Class clazz = object.getClass();</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 成员变量也是对象</div><div class="line">		 *</div><div class="line">		 * java.lang.reflect.Field</div><div class="line">		 *</div><div class="line">		 * Field类封装了关于成员变量的操作</div><div class="line">		 *</div><div class="line">		 * getFields()获取的是所有的Public的成员变量的信息</div><div class="line">		 *</div><div class="line">		 * getDeclaredFields()获取的是该类自己声明的变量的信息</div><div class="line">		 *</div><div class="line">		 */</div><div class="line">		<span class="comment">// Field[] fields = clazz.getFields();</span></div><div class="line">		Field[] fields = clazz.getDeclaredFields();</div><div class="line">		<span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">			<span class="comment">// 得到成员变量的类型的类类型</span></div><div class="line">			Class fieldType = field.getType();</div><div class="line">			String typeName = fieldType.getName();</div><div class="line">			<span class="comment">// 得到成员变量的名称</span></div><div class="line">			String fieldName = field.getName();</div><div class="line">			System.out.println(typeName + <span class="string">" "</span> + fieldName);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 打印对象的构造函数的信息</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> object</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstructorMsg</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"\n下面打印的是对象的    构造方法    信息：\n"</span>);</div><div class="line"></div><div class="line">		Class clazz = object.getClass();</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 构造函数也是对象</div><div class="line">		 *</div><div class="line">		 * java.lang.reflect.Constructor</div><div class="line">		 *</div><div class="line">		 * getConstructors()获取的是该类的所有public方法</div><div class="line">		 *</div><div class="line">		 * getDeclaredConstructors()获取的是该对象自己声明的构造方法</div><div class="line">		 */</div><div class="line">		<span class="comment">// Constructor[] constructors = clazz.getConstructors();</span></div><div class="line">		Constructor[] constructors = clazz.getDeclaredConstructors();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (Constructor constructor : constructors) &#123;</div><div class="line">			System.out.print(constructor.getName() + <span class="string">"("</span>);</div><div class="line"></div><div class="line">			Class[] paramTypes = constructor.getParameterTypes();</div><div class="line"></div><div class="line">			<span class="keyword">for</span> (Class paramClazz : paramTypes) &#123;</div><div class="line">				System.out.print(paramClazz.getName()+ <span class="string">" , "</span> );</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">")"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 打印对象的方法信息</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> object</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMethodMsg</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"\n下面打印的是对象的    方法    信息：\n"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 获取该对象的类类型</span></div><div class="line">		Class clazz = object.getClass();</div><div class="line">		System.out.println(<span class="string">"类的名称是："</span> + clazz.getName());</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * Method类，方法对象</div><div class="line">		 *</div><div class="line">		 * java.lang.reflect.Method</div><div class="line">		 *</div><div class="line">		 * 一个成员方法就是一个Method对象</div><div class="line">		 *</div><div class="line">		 * getMethods()方法获取的就是该class or interface 的所有的public的方法，包括父类继承的方法。</div><div class="line">		 *</div><div class="line">		 * getDeclaredMethods()获取的是该class or interface 自己声明的方法，不问访问权限。</div><div class="line">		 */</div><div class="line"><span class="comment">//		Method[] methods = clazz.getMethods();</span></div><div class="line">		Method[] methods = clazz.getDeclaredMethods();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">			<span class="comment">// 得到方法的返回值类型的类类型</span></div><div class="line">			Class returnType = method.getReturnType();</div><div class="line">			System.out.print(returnType.getName() + <span class="string">" "</span>);</div><div class="line">			<span class="comment">// 得到方法的名称</span></div><div class="line">			System.out.print(method.getName() + <span class="string">"("</span>);</div><div class="line">			<span class="comment">// 获取参数类型--&gt; 得到的是参数列表的类类型</span></div><div class="line">			Class[] paramTypes = method.getParameterTypes();</div><div class="line">			<span class="keyword">for</span> (Class paramClazz : paramTypes) &#123;</div><div class="line">				System.out.print(paramClazz.getName() + <span class="string">" , "</span>);</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">")"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，定义一个：ClassDemo.java 来帮助我们了解Class类的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.reflect;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> *Class类的使用</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * AkaThinkBook也是一个实例对象</div><div class="line">		 * 任何一个类都是Class的实例对象，这个实例对象有三种表示方式</div><div class="line">		 *</div><div class="line">		 */</div><div class="line">		AkaThinkBook akaThinkBook = <span class="keyword">new</span> AkaThinkBook();</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 第一种表示方式－－&gt;实际在告诉我们任何一个类都有一个隐含的静态成员变量class</div><div class="line">		 */</div><div class="line">		Class clazz1 = AkaThinkBook.class;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 第二种表示方式－－&gt;已经知道该类的对象，通过getClass()获取</div><div class="line">		 */</div><div class="line">		Class clazz2 = akaThinkBook.getClass();</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *</div><div class="line">		 * 总结：</div><div class="line">		 *</div><div class="line">		 * clazz1、clazz2在官网里称为AkaThinkBook的类类型</div><div class="line">		 *</div><div class="line">		 * 万事万物皆对象</div><div class="line">		 *</div><div class="line">		 * 类也是对象，是Class类的实例对象</div><div class="line">		 *</div><div class="line">		 * 这个对象我们称之为该类的类类型</div><div class="line">		 *</div><div class="line">		 *</div><div class="line">		 */</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 一个类只可能是Class类的一个实例对象，无论采用哪种方式获取返回的都是同一个对象。</div><div class="line">		 */</div><div class="line">		System.out.println(clazz1 == clazz2);</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 第三种表示方式－－&gt;不仅表示类的类类型，还代表了动态加载类</div><div class="line">		 *</div><div class="line">		 * 编译时刻加载类是静态加载类，运行时刻加载类是动态加载</div><div class="line">		 *</div><div class="line">		 */</div><div class="line">		Class clazz3 = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			clazz3 = Class.forName(<span class="string">"com.akathink.reflect.AkaThinkBook"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		System.out.println(clazz1 == clazz3);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//我们完全可以通过类的类类型创建该类的实例对象</span></div><div class="line">			AkaThinkBook book = (AkaThinkBook)clazz1.newInstance();<span class="comment">//需要有无参数的构造方法</span></div><div class="line">			book.getBookInfo();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ClassUtil.printFieldMsg(akaThinkBook);</div><div class="line">		ClassUtil.printConstructorMsg(akaThinkBook);</div><div class="line">		ClassUtil.printMethodMsg(akaThinkBook);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">true</div><div class="line">AkaThink即将出版的《音画》APP为您提供优质的音画作品，带给您美的享受！</div><div class="line"></div><div class="line"></div><div class="line">下面打印的是对象的    字段    信息：</div><div class="line"></div><div class="line">java.lang.String bookName</div><div class="line">java.lang.String bookAuthor</div><div class="line"></div><div class="line">下面打印的是对象的    构造方法    信息：</div><div class="line"></div><div class="line">com.akathink.reflect.AkaThinkBook()</div><div class="line">com.akathink.reflect.AkaThinkBook(java.lang.String , java.lang.String , )</div><div class="line"></div><div class="line">下面打印的是对象的    方法    信息：</div><div class="line"></div><div class="line">类的名称是：com.akathink.reflect.AkaThinkBook</div><div class="line">void getBookInfo()</div><div class="line">java.lang.String getBookName()</div><div class="line">void setBookName(java.lang.String , )</div><div class="line">java.lang.String getBookAuthor()</div><div class="line">void setBookAuthor(java.lang.String , )</div></pre></td></tr></table></figure>
<h2 id="方法反射的操作"><a href="#方法反射的操作" class="headerlink" title="方法反射的操作"></a>方法反射的操作</h2><p>通过上面的案例，我们可以很方便的获取都对象里面的任何字段、方法、构造方法等信息，下面我们再讲解一下如何通过通过反射调用方法：<br>下面是通过反射调用方法的模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method.invoke(对象，参数列表)</div></pre></td></tr></table></figure></p>
<p>我们创建一个：MethodDemo.java类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.reflect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		AkaThinkBook akaThinkBook = <span class="keyword">new</span> AkaThinkBook(<span class="string">"魔女闹江湖"</span>, <span class="string">"顾漫"</span>);</div><div class="line">		<span class="comment">// 第一步:获取类类型</span></div><div class="line">		Class clazz = akaThinkBook.getClass();</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"未修改之前书名为："</span> + akaThinkBook.getBookName());</div><div class="line"></div><div class="line">		<span class="comment">// 第二步:获取方法</span></div><div class="line">		Method method;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			method = clazz.getMethod(<span class="string">"setBookName"</span>, String.class);</div><div class="line">			<span class="comment">// 第三步：调用setBookName(String bookName)方法</span></div><div class="line">			method.invoke(akaThinkBook, <span class="string">"微微一笑很倾城"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"修改之后书名为："</span> + akaThinkBook.getBookName());</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">未修改之前书名为：魔女闹江湖</div><div class="line">修改之后书名为：微微一笑很倾城</div></pre></td></tr></table></figure>
<h2 id="通过Class、Method来认识泛型的本质"><a href="#通过Class、Method来认识泛型的本质" class="headerlink" title="通过Class、Method来认识泛型的本质"></a>通过Class、Method来认识泛型的本质</h2><p>创建一个ArrayListDemo.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.reflect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		ArrayList mDataList1 = <span class="keyword">new</span> ArrayList();</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *</div><div class="line">		 * 我曾经见过的一个面试题：如何让ArrayList&lt;String&gt;类型的变量添加一个int类型的值，下面就以此为例来介绍如何通过反射了解集合泛型的本质</div><div class="line">		 *</div><div class="line">		 *</div><div class="line">		 */</div><div class="line">		ArrayList&lt;String&gt; mDataList2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">		System.out.println(mDataList1.getClass() == mDataList2.getClass());</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *</div><div class="line">		 *</div><div class="line">		 * 返回true说明编译之后集合的泛型是去泛型话的</div><div class="line">		 *</div><div class="line">		 * Java中集合的泛型，是防止错误输入的，只在编译阶段有效，绕过编译就无效了</div><div class="line">		 *</div><div class="line">		 * 反射的操作都是编译之后的操作</div><div class="line">		 *</div><div class="line">		 * 验证：我们可以通过方法的反射来操作，绕过编译</div><div class="line">		 *</div><div class="line">		 *</div><div class="line">		 */</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Method m = mDataList2.getClass().getMethod(<span class="string">"add"</span>, Object.class);</div><div class="line"></div><div class="line">			m.invoke(mDataList2, <span class="number">10</span>);</div><div class="line">			m.invoke(mDataList2, <span class="number">20</span>);</div><div class="line">			m.invoke(mDataList2, <span class="number">30</span>);</div><div class="line"></div><div class="line"></div><div class="line">			System.out.println(mDataList2);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e1) &#123;</div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">[10, 20, 30]</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.imooc.com/learn/199" target="_blank" rel="external">http://www.imooc.com/learn/199</a><br><a href="http://www.cnblogs.com/yaozhongxiao/archive/2013/05/21/3091353.html" target="_blank" rel="external">http://www.cnblogs.com/yaozhongxiao/archive/2013/05/21/3091353.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h1&gt;&lt;p&gt;在了解反射之前，我们首先了解一下Class和Object：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Class： 所有类的根源,是整个Ja
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="Java" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Java/"/>
    
      <category term="反射" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Java/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="公共基础知识" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Java/%E5%8F%8D%E5%B0%84/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="Java" scheme="http://akathink.com/tags/Java/"/>
    
      <category term="反射" scheme="http://akathink.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="公共基础知识" scheme="http://akathink.com/tags/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂Java注解Annotation</title>
    <link href="http://akathink.com/2016/08/11/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Java%E6%B3%A8%E8%A7%A3Annotation/"/>
    <id>http://akathink.com/2016/08/11/彻底搞懂Java注解Annotation/</id>
    <published>2016-08-11T02:29:25.000Z</published>
    <updated>2016-08-11T09:35:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h1><ul>
<li>定义</li>
</ul>
<p>注解：提供一种为程序元素设置元数据的方法。</p>
<font color="#8855cc" size="4">基本原则：注解不能直接干扰程序代码的运行，无论增加或删除注解，代码都能够正常运行。</font>

<p>注解（也被成为元数据）为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便地使用这些数据。 ———摘自《Thinking in Java》</p>
<font color="#8855cc" size="4">简单来说注解的作用就是将我们的需要的数据储存起来，在以后的某一个时刻（可能是编译时，也可能是运行时）去调用它。</font>

<ul>
<li>元数据</li>
</ul>
<p>元数据：就是关于数据的数据</p>
<p>元数据的作用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 编写文档：通过代码里标识的元数据生成文档；</div><div class="line">2. 代码分析：通过代码里标识的元数据对代码进行分析；</div><div class="line">3. 编译检查：通过代码里标识的元数据让编译器能实现基本的编译检查。</div></pre></td></tr></table></figure></p>
<h1 id="为什么要学习注解？"><a href="#为什么要学习注解？" class="headerlink" title="为什么要学习注解？"></a>为什么要学习注解？</h1><ul>
<li>能够读懂别人使用注解实现的开源库</li>
<li>让编程变得更加简洁</li>
</ul>
<h1 id="注解的功能"><a href="#注解的功能" class="headerlink" title="注解的功能"></a>注解的功能</h1><ul>
<li>作为特定的标记，用于告诉编译器一些信息</li>
<li>编译时动态处理，如动态生成代码</li>
<li>运行时动态处理，作为额外信息的载体，如得到注解信息</li>
</ul>
<h1 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h1><ul>
<li>标准注解：Override、Deprecated、SuppressWarnings<br>标准 Annotation 是指 Java 自带的几个 Annotation，上面三个分别表示重写函数，不鼓励使用(有更好方式、使用有风险或已不在维护)，忽略某项 Warning;</li>
<li>元注解：@Retention、@Target、@Inherited、@Documented<br>元 Annotation 是指用来定义 Annotation 的 Annotation，在自定义注解部分将会详细介绍；</li>
<li>自定义注解<br>自定义 Annotation 表示自己根据需要定义的 Annotation，定义时需要用到上面的元 Annotation<br>这里是一种分类而已，也可以根据作用域分为源码时、编译时、运行时 Annotation，后面在自定义 Annotation 时会具体介绍。</li>
</ul>
<h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>因为自定义注解，是使用元注解来实现的，所以我们先详细的了解一下元注解，然后再通过一个例子来讲解如何实现和使用自定义注解。</p>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><ul>
<li><strong>@Target</strong></li>
</ul>
<p>说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>
<p><strong><font color="#ff0000" size="4">作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</font></strong></p>
<p>取值(ElementType)有：</p>
<ol>
<li>CONSTRUCTOR:用于描述构造器</li>
<li>FIELD:用于描述域</li>
<li>LOCAL_VARIABLE:用于描述局部变量</li>
<li>METHOD:用于描述方法</li>
<li>PACKAGE:用于描述包</li>
<li>PARAMETER:用于描述参数</li>
<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>
</ol>
<p><strong>@Target的源码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an array of the kinds of elements an annotation type</div><div class="line">     * can be applied to.</div><div class="line">     * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</div><div class="line">     * can be applied to</div><div class="line">     */</div><div class="line">    ElementType[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</div><div class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></div><div class="line">    TYPE,</div><div class="line"></div><div class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></div><div class="line">    FIELD,</div><div class="line"></div><div class="line">    <span class="comment">/** Method declaration */</span></div><div class="line">    METHOD,</div><div class="line"></div><div class="line">    <span class="comment">/** Formal parameter declaration */</span></div><div class="line">    PARAMETER,</div><div class="line"></div><div class="line">    <span class="comment">/** Constructor declaration */</span></div><div class="line">    CONSTRUCTOR,</div><div class="line"></div><div class="line">    <span class="comment">/** Local variable declaration */</span></div><div class="line">    LOCAL_VARIABLE,</div><div class="line"></div><div class="line">    <span class="comment">/** Annotation type declaration */</span></div><div class="line">    ANNOTATION_TYPE,</div><div class="line"></div><div class="line">    <span class="comment">/** Package declaration */</span></div><div class="line">    PACKAGE,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Type parameter declaration</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    TYPE_PARAMETER,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Use of a type</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    TYPE_USE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@Retention</strong></li>
</ul>
<p>定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。</p>
<p><strong><font color="#ff0000" size="4">作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</font></strong></p>
<p>取值（RetentionPoicy）有：</p>
<ol>
<li>SOURCE:在源文件中有效（即源文件保留）</li>
<li>CLASS:在class文件中有效（即class保留）</li>
<li>RUNTIME:在运行时有效（即运行时保留）</li>
</ol>
<p><strong>@Retention的源码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the retention policy.</div><div class="line">     * <span class="doctag">@return</span> the retention policy</div><div class="line">     */</div><div class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Annotations are to be discarded by the compiler.</div><div class="line">     */</div><div class="line">    SOURCE,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Annotations are to be recorded in the class file by the compiler</div><div class="line">     * but need not be retained by the VM at run time.  This is the default</div><div class="line">     * behavior.</div><div class="line">     */</div><div class="line">    CLASS,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Annotations are to be recorded in the class file by the compiler and</div><div class="line">     * retained by the VM at run time, so they may be read reflectively.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</div><div class="line">     */</div><div class="line">    RUNTIME</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@Documented</strong></li>
</ul>
<p>用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</p>
<p><strong>@Documented的源码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Documented &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>@Inherited</strong></li>
</ul>
<p>@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>
<p>注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。</p>
<p>当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p>
<p><strong>@Inherited的源码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inherited &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实现和使用自定义注解"><a href="#实现和使用自定义注解" class="headerlink" title="实现和使用自定义注解"></a>实现和使用自定义注解</h2><p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p>
<ul>
<li><p>定义注解格式</p>
<p>public <em>@interface</em> 注解名 {定义体}</p>
</li>
<li><p>注解参数的可支持数据类型</p>
</li>
</ul>
<ol>
<li>所有基本数据类型（int,float,boolean,byte,double,char,long,short)</li>
<li>String类型</li>
<li>Class类型</li>
<li>enum类型</li>
<li>Annotation类型</li>
<li>以上所有类型的数组</li>
</ol>
<p>Annotation类型里面的参数该怎么设定:  </p>
<ol>
<li>首先,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　</li>
<li>其次,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　</li>
<li>最后,如果只有一个参数成员,最好把参数名称设为”value”,后加小括号.例:下面的例子FruitName注解就只有一个参数成员。</li>
</ol>
<h3 id="下面通过源码来展示自定义注解："><a href="#下面通过源码来展示自定义注解：" class="headerlink" title="下面通过源码来展示自定义注解："></a>下面通过源码来展示自定义注解：</h3><p>首先，我们自定义一个注解：AuthorAnnotation 来标记作者的信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.annotation;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义注解：作者信息注解</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AuthorAnnotation &#123;</div><div class="line">	<span class="comment">// 名字</span></div><div class="line">	<span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">// 年龄</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 19</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 性别</span></div><div class="line">	<span class="function">String <span class="title">gender</span><span class="params">()</span> <span class="keyword">default</span> "男"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次，再定义一个注解：BookAnnotation 来标记故事书籍的内容信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.annotation;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * 自定义注解：树的信息注解</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BookAnnotation &#123;</div><div class="line">	<span class="comment">// 书名</span></div><div class="line">	<span class="function">String <span class="title">bookName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">// 女主人公</span></div><div class="line">	<span class="function">String <span class="title">heroine</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">// 书的简介</span></div><div class="line">	<span class="function">String <span class="title">briefOfBook</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">// 书的销量</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">sales</span><span class="params">()</span> <span class="keyword">default</span> 10000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们定义一种类型的书：LoveStoryBook，类注解标记的是《泡沫之夏》，为了区分，方法注解标记的是《微微一笑很倾城》</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.entity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.annotation.AuthorAnnotation;</div><div class="line"><span class="keyword">import</span> com.akathink.annotation.BookAnnotation;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * 爱的故事</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@BookAnnotation</span>(bookName = <span class="string">"泡沫之夏"</span>,</div><div class="line">				heroine = <span class="string">"尹夏沫"</span>,</div><div class="line">				briefOfBook = <span class="string">"淡漠安静的性格使得欧辰与洛熙为她神魂颠倒。她是冷漠与激情混合体，"</span></div><div class="line">						+ <span class="string">"只是在经过种种遭遇，饱尝了人间冷暖后。她用冷漠的外衣将自己包裹住，不愿"</span></div><div class="line">						+ <span class="string">"让人看见自己真实的性格，最后与欧辰携手走进婚姻的殿堂。"</span>,</div><div class="line">				sales = <span class="number">1000000</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoveStoryBook</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@AuthorAnnotation</span>(name = <span class="string">"明晓溪"</span>, age = <span class="number">28</span>, gender = <span class="string">"女"</span>)</div><div class="line">	<span class="keyword">private</span> String user;</div><div class="line"></div><div class="line">	<span class="meta">@BookAnnotation</span>(bookName = <span class="string">"微微一笑很倾城"</span>,</div><div class="line">			heroine = <span class="string">"顾漫"</span>,</div><div class="line">			briefOfBook = <span class="string">"《微微一笑很倾城》一书中出现的游戏叫梦游江湖，女主角PK榜上排名第六的芦"</span></div><div class="line">					+ <span class="string">"苇微微是一身劲装背着大刀的红衣女侠，男主角第一高手一笑奈何则是一身白衣纤尘不"</span></div><div class="line">					+ <span class="string">"染衣袂飘飘潇洒出尘的琴师。两人在经典地点长安城朱雀桥相遇并举行婚礼。书中游戏"</span></div><div class="line">					+ <span class="string">"既有一般游戏常见的跑环、摆摊，也有现阶段游戏不存在的宝宝结婚、抢亲等功能。"</span>,</div><div class="line">			sales = <span class="number">800000</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBookInfo</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注解解析"><a href="#注解解析" class="headerlink" title="注解解析"></a>注解解析</h3><p>上面已经将要注解的类和两个注解类实现了，下面定义一个类：ParseAnnotation，来解析我们自定义的注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.annotation;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.entity.LoveStoryBook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseAnnotation</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *</div><div class="line">	 * 解析类注解</div><div class="line">	 * LoveStoryBook</div><div class="line">	 * <span class="doctag">@throws</span> ClassNotFoundException</div><div class="line">	 */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseTypeAnnotation</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">		Class clazz = Class.forName(<span class="string">"com.akathink.entity.LoveStoryBook"</span>);</div><div class="line">        Annotation[] annotations = clazz.getAnnotations();</div><div class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</div><div class="line">            BookAnnotation bookAnnotation = (BookAnnotation) annotation;</div><div class="line">            System.out.println(<span class="string">"书名："</span> + bookAnnotation.bookName() + <span class="string">"\n"</span> +</div><div class="line">            					<span class="string">"女主人公："</span> + bookAnnotation.heroine() + <span class="string">"\n"</span> +</div><div class="line">            					<span class="string">"书的简介："</span> + bookAnnotation.briefOfBook() + <span class="string">"\n"</span>+</div><div class="line">            					<span class="string">"书的销量："</span> + bookAnnotation .sales() + <span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 解析方法注解</div><div class="line">  * <span class="doctag">@throws</span> ClassNotFoundException</div><div class="line">  */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseMethodAnnotation</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</div><div class="line">        Method[] methods = LoveStoryBook.class.getDeclaredMethods();</div><div class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">             <span class="comment">/*</span></div><div class="line">             * 判断方法中是否有指定注解类型的注解</div><div class="line">             */  </div><div class="line">            <span class="keyword">boolean</span> hasAnnotation = method.isAnnotationPresent(BookAnnotation.class);</div><div class="line">            <span class="keyword">if</span>(hasAnnotation)&#123;</div><div class="line">            	 BookAnnotation bookAnnotation = (BookAnnotation) method.getAnnotation(BookAnnotation.class);</div><div class="line">                 System.out.println(<span class="string">"书名："</span> + bookAnnotation.bookName() + <span class="string">"\n"</span> +</div><div class="line">                 					<span class="string">"女主人公："</span> + bookAnnotation.heroine() + <span class="string">"\n"</span> +</div><div class="line">                 					<span class="string">"书的简介："</span> + bookAnnotation.briefOfBook() + <span class="string">"\n"</span>+</div><div class="line">                 					<span class="string">"书的销量："</span> + bookAnnotation .sales() + <span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 解析域注解</div><div class="line">   * <span class="doctag">@throws</span> ClassNotFoundException</div><div class="line">   */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseFieldAnnotation</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</div><div class="line">        Field[] fields = LoveStoryBook.class.getDeclaredFields();</div><div class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">            <span class="keyword">boolean</span> hasAnnotation = field.isAnnotationPresent(AuthorAnnotation.class);</div><div class="line">            <span class="keyword">if</span>(hasAnnotation)&#123;</div><div class="line">            	AuthorAnnotation authorAnnotation = field.getAnnotation(AuthorAnnotation.class);</div><div class="line">            	 System.out.println(<span class="string">"作者："</span> +authorAnnotation.name() + <span class="string">"\n"</span> +</div><div class="line">      					<span class="string">"年龄："</span> + authorAnnotation.age() + <span class="string">"\n"</span> +</div><div class="line">      					<span class="string">"性别："</span> + authorAnnotation.gender() + <span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后的最后就是验证我们自定义的注解是否正确：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.annotation;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</div><div class="line">		<span class="comment">//解析域的注解</span></div><div class="line">		System.out.println(<span class="string">"下面是解析域的注解信息：\n\n"</span>);</div><div class="line">		ParseAnnotation.parseFieldAnnotation();</div><div class="line">		<span class="comment">//解析方法的注解</span></div><div class="line">		System.out.println(<span class="string">"下面是解析方法的注解信息：\n\n"</span>);</div><div class="line">		ParseAnnotation.parseMethodAnnotation();</div><div class="line">		<span class="comment">//解析类的注解</span></div><div class="line">		System.out.println(<span class="string">"下面是解析类的注解信息:\n\n"</span>);</div><div class="line">		ParseAnnotation.parseTypeAnnotation();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">下面是解析域的注解信息：</div><div class="line"></div><div class="line"></div><div class="line">作者：明晓溪</div><div class="line">年龄：28</div><div class="line">性别：女</div><div class="line"></div><div class="line">下面是解析方法的注解信息：</div><div class="line"></div><div class="line"></div><div class="line">书名：微微一笑很倾城</div><div class="line">女主人公：顾漫</div><div class="line">书的简介：《微微一笑很倾城》一书中出现的游戏叫梦游江湖，女主角PK榜上排名第六的芦苇微微是一身劲装背着大刀的红衣女侠，男主角第一高手一笑奈何则是一身白衣纤尘不染衣袂飘飘潇洒出尘的琴师。两人在经典地点长安城朱雀桥相遇并举行婚礼。书中游戏既有一般游戏常见的跑环、摆摊，也有现阶段游戏不存在的宝宝结婚、抢亲等功能。</div><div class="line">书的销量：800000</div><div class="line"></div><div class="line">下面是解析类的注解信息:</div><div class="line"></div><div class="line"></div><div class="line">书名：泡沫之夏</div><div class="line">女主人公：尹夏沫</div><div class="line">书的简介：淡漠安静的性格使得欧辰与洛熙为她神魂颠倒。她是冷漠与激情混合体，只是在经过种种遭遇，饱尝了人间冷暖后。她用冷漠的外衣将自己包裹住，不愿让人看见自己真实的性格，最后与欧辰携手走进婚姻的殿堂。</div><div class="line">书的销量：1000000</div></pre></td></tr></table></figure>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>对局部变量的注解只能在源码级别上进行处理，class文件并不描述局部变量。因此，所有的局部变量注解在编译完一个类的时候就会被遗弃掉。同样的，对包的注解不能在源码级别之外存在。</li>
<li>一条没有@Target限制的注解可以应用于任何项上。</li>
<li>@Inherited元注解只能应用于对类的注解</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《Java核心技术卷二》<br>《Thinking in Java》<br><a href="http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html" target="_blank" rel="external">http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html</a><br><a href="http://a.codekk.com/detail/Android/Trinea/公共技术点之%20Java%20注解%20Annotation" target="_blank" rel="external">http://a.codekk.com/detail/Android/Trinea/公共技术点之%20Java%20注解%20Annotation</a><br><a href="http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html" target="_blank" rel="external">http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注解的定义&quot;&gt;&lt;a href=&quot;#注解的定义&quot; class=&quot;headerlink&quot; title=&quot;注解的定义&quot;&gt;&lt;/a&gt;注解的定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注解：提供一种为程序元素设置元数据的方法。&lt;/p&gt;
&lt;font col
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="Java" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Java/"/>
    
      <category term="注解" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Java/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="公共基础知识" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Java/%E6%B3%A8%E8%A7%A3/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="Java" scheme="http://akathink.com/tags/Java/"/>
    
      <category term="公共基础知识" scheme="http://akathink.com/tags/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="注解" scheme="http://akathink.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂红黑树</title>
    <link href="http://akathink.com/2016/08/08/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://akathink.com/2016/08/08/彻底搞懂红黑树/</id>
    <published>2016-08-08T11:29:18.000Z</published>
    <updated>2016-08-10T13:51:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>二叉树（Binary Tree）是n(n &gt;= 0)个节点的有限集合。该集合或者未空集（称为空二叉树），或者由一个根节点和两棵互不相交的，分别称为根节点的左子树和右子树的二叉树组成。</p>
<h3 id="二叉树特点"><a href="#二叉树特点" class="headerlink" title="二叉树特点"></a>二叉树特点</h3><ul>
<li>每个节点 <font color="#00ffff" size="4">最多</font> 有两棵子树。所以二叉树中不存在大于2的节点。</li>
<li>左子树和右子树是有顺序的，次序不能任一颠倒。就像人的双手和双脚，显然左手和右手，左脚和右脚都是不能颠倒顺序呼唤的，否则那也太别扭了。</li>
<li>即使树中某节点只有一棵子树，也要区分它是左子树还是右子树。</li>
</ul>
<h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><ul>
<li>斜树：顾名思义，斜树一定是斜的，所有的节点都只有左子树的二叉树叫左斜树，所有节点都是只有右子树的二叉树叫右斜树，两者统称为斜树。</li>
<li>满二叉树：在一棵二叉树中，如果所有分支节点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</li>
<li>完全二叉树：对一棵具有n个节点的二叉树按层序编号，如果编号为i(1&lt;=i&lt;=n)的节点与同样深度的满二叉树编号为i的节点在二叉树中位置完全相同，则称该二叉树为完全二叉树。满二叉树一定是完全二叉树，但完全二叉树不一定是满的。</li>
<li>赫夫曼树：是一种带权路径长度最短的树。</li>
<li><p>平衡二叉树：是一种 <strong><font color="#00ffff" size="4">二叉排序树（或者叫二叉查找树）</font></strong>，其中每个节点的左子树和右子树的高度差至多等于1.<br>那么什么是二叉排序树呢？二叉排序树（Binary Sort Tree），又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">若它的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</div><div class="line">若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</div><div class="line">它的左右子树也分别为二叉排序树。</div></pre></td></tr></table></figure>
</li>
<li><p>红黑树：具体定义和性质请往下看。</p>
</li>
</ul>
<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h2><p>红黑树，一种自平衡的 <strong><font color="#00ffff" size="4">二叉查找树</font></strong>，但在每个节点上有一个额外的存储位表示节点的颜色，可以是Red或者Black。这些颜色位用来确保红黑树在插入和删除操作后仍能近乎平衡。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="红黑树示意图"></p>
<h2 id="红黑树的五个性质："><a href="#红黑树的五个性质：" class="headerlink" title="红黑树的五个性质："></a>红黑树的五个性质：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* 性质一：节点要么是红色要么是黑色。</div><div class="line">* 性质二：根节点是黑色。</div><div class="line">* 性质三：所有叶子节点都是黑色（叶子是NIL节点，被称为&lt;font color=#00ffff size=4&gt;黑哨兵&lt;/font&gt;）。</div><div class="line">* 性质四：每个红色节点的两个子节点都是黑色（从每个叶子到根的所有路径上不能有两个连续的红色节点）。</div><div class="line">* 性质五：从任一节点到每个叶子节点的所有路径都包含相同数目的黑色节点。</div></pre></td></tr></table></figure>
<p>这些约束强制了红黑树的关键性质: 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。</p>
<h2 id="红黑树的应用场景"><a href="#红黑树的应用场景" class="headerlink" title="红黑树的应用场景"></a>红黑树的应用场景</h2><p>到此，我们可能已经对红黑树有了一点初步的认识了，但是我们却不知道为什么要有红黑树，红黑树是为了解决什么问题被提出来的呢？<br>我们知道，二叉查找树在大多数情况下查找和插入在效率上是没有问题的，但是在最坏的情况下效率比较低，但是平衡二叉树能够保证在最坏的情况下也能达到lgN，要实现这一目标，我们就要保证在插入完成后始终保持平衡状态。在一棵具有N个节点的树中，我们希望该树的高度能够维持在lgN左右，这样我们就能保证只需要lgN次比较操作就可以查找到想要的值。不幸的是，每次插入元素之后维持树的平衡状态太昂贵。所以就出现一些新的数据结构来保证在最坏的情况下插入和查找效率都能保证在对数的时间复杂度内完成。而我们所讲的红黑树就属于此新的数据结构之一，除此之外还有B树等数据结构。</p>
<p>HashMap Java1.8版本对HashMap做了优化，采用数组＋链表＋红黑树的数据结构，除此之外TreeMap也是采用的红黑树的数据结构来实现的。</p>
<h2 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h2><p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%B7%A6%E6%97%8B%E5%8F%B3%E6%97%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="左旋和右旋"></p>
<h2 id="红黑树查询操作"><a href="#红黑树查询操作" class="headerlink" title="红黑树查询操作"></a>红黑树查询操作</h2><h2 id="红黑树插入操作"><a href="#红黑树插入操作" class="headerlink" title="红黑树插入操作"></a>红黑树插入操作</h2><p>若将一个节点插入到红黑树中，我们需要执行哪些操作呢？</p>
<ul>
<li>首先，将红黑树当作一棵二叉查找树，将节点插入；</li>
<li>其次，将待插入节点着色为红色；</li>
<li>最后，通过“旋转和重新着色”等一系列操作来修正该树，使之重新成为一棵红黑树。</li>
</ul>
<p>下面分别解释一下这三步操作：</p>
<h3 id="第一步：将红黑树当作一棵二叉查找树，将节点插入"><a href="#第一步：将红黑树当作一棵二叉查找树，将节点插入" class="headerlink" title="第一步：将红黑树当作一棵二叉查找树，将节点插入"></a>第一步：将红黑树当作一棵二叉查找树，将节点插入</h3><p>红黑树本身就是一棵二叉查找树，将新节点插入后，该树仍然是一棵二叉查找树。也就意味着，树的键值仍然是有序的。此外，无论是左旋还是右旋，若旋转之前这棵树是二叉查找树，那么旋转之后它一定还是二叉查找树。这也就意味着，任何的旋转和重新着色操作，都不会改变它仍然是一棵二叉查找树的事实。</p>
<h3 id="第二步：将待插入节点着色为红色"><a href="#第二步：将待插入节点着色为红色" class="headerlink" title="第二步：将待插入节点着色为红色"></a>第二步：将待插入节点着色为红色</h3><p>为什么插入的节点是红色，而不是黑色呢？</p>
<p>如果插入的是黑色节点，则肯定会在某条路径上增加黑色节点的数目，从而导致整棵树高度的不平衡，也就违反了红黑树的第五条性质；但如果新节点的父节点为红色时（如下图），将会违反红黑树性质四：一条路径上不能出现连续的两个红色节点，这时就需要通过一系列操作来使红黑树保持平衡。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E4%B9%8B%E6%8F%92%E5%85%A5%E7%BA%A2%E8%89%B2%E8%8A%82%E7%82%B9.jpg" alt="红黑树之插入红色节点"></p>
<p>若将插入节点更改为“红色”节点，会违背红黑树的哪些性质呢？</p>
<ul>
<li>对于性质一，因为我们已经将插入节点涂成红色了，所以肯定不会违背。</li>
<li>对于性质二，因为我们是将红黑树当作二叉查找树，然后执行的插入操作。而根据二叉查找树的特点。插入操作不会改变根节点，所以根节点依然是黑色，也不会违背该性质。</li>
<li>对于性质三：因为叶子节点是黑哨兵，都是一些空节点，我们此时插入的是非空节点，所以也不会违背该性质。</li>
<li>对于性质四：<font color="#0891ff" size="4">有可能会违背</font>。</li>
<li>对于性质五：因为插入的是红色节点，肯定不会影响某条路径上的黑色节点的数目的，所以肯定不会违背性质五。</li>
</ul>
<p>经过上面的分析可知，想办法使之满足“性质四”，就可以将树重新构造成红黑树了。</p>
<h3 id="第三步：通过“旋转和重新着色”等一系列操作来修正该树，使之重新成为一棵红黑树"><a href="#第三步：通过“旋转和重新着色”等一系列操作来修正该树，使之重新成为一棵红黑树" class="headerlink" title="第三步：通过“旋转和重新着色”等一系列操作来修正该树，使之重新成为一棵红黑树"></a>第三步：通过“旋转和重新着色”等一系列操作来修正该树，使之重新成为一棵红黑树</h3><p>为了更清晰地了解红黑树的插入操作，下面将会分具体的几种情况来介绍：</p>
<p>假设我们将要插入的节点用“新”表示，新插入节点的父节点用“父”表示，使用“叔”字表示“父”节点的兄弟节点，使用“祖”字表示“父”节点的父节点。</p>
<ul>
<li>黑“父”</li>
</ul>
<p>如下图所示，如果“新”节点的父节点为黑色，那么插入一个红节点，将不会影响红黑树的平衡，此时插入操作完成。红黑树比AVL树优秀的地方之一在于黑父的情况比较常见，从而使红黑树需要旋转的概率相对AVL树来说会少一些。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E9%BB%91%E7%88%B6new.jpg" alt="黑父"></p>
<ul>
<li>红“父”</li>
</ul>
<p>如下图所示。如果“新”节点的父节点为红色，若要新插入红色的“新”节点就违背了性质四：每条路径上不能有连续的两个红节点。由于”父”节点为红色，那么“祖”节点肯定为黑色。蓝色节点表示颜色未知。由于有可能需要根节点到“新”节点的路径上进行多次旋转操作，而每次进行不平衡判断的起始点都不一样，所以我们使用一个黑色箭头指向这个起始点，并称之为判定点。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%BA%A2%E7%88%B6new.jpg" alt="红父"></p>
<ol>
<li>红”叔”</li>
</ol>
<p>当“叔”节点为红色时，如下图所示，无需进行旋转操作，只要将父和叔节点变为黑色，将”祖”节点变为红色即可。但由于祖父节点的父节点有可能为红色，从而违反红黑树性质。此时必须将祖父节点作为新的判定点继续向上进行平衡操作。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%BA%A2%E5%8F%94.jpg" alt="红叔"></p>
<p>需要注意，无论“父”在”叔“的左边还是右边，无论“新”是”父”的左孩子还是右孩子，它们的操作都是完全一样的。</p>
<ol>
<li>黑“叔”</li>
</ol>
<ul>
<li>情形1：</li>
</ul>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E9%BB%91%E5%8F%94LL%E6%97%8B%E8%BD%AC.jpg" alt="黑叔LL旋转"></p>
<ul>
<li>情形2：</li>
</ul>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E9%BB%91%E6%A0%91LR%E6%97%8B%E8%BD%AC.jpg" alt="黑叔LR旋转"></p>
<ul>
<li>情形3：</li>
</ul>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E9%BB%91%E5%8F%94RR%E6%97%8B%E8%BD%AC.jpg" alt="黑叔RR旋转"></p>
<ul>
<li>情形4：</li>
</ul>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E9%BB%91%E5%8F%94RL%E6%97%8B%E8%BD%AC.jpg" alt="黑叔RL旋转"></p>
<p>可以观察到，当旋转完成后，新的旋转根全部为黑色，此时不需要再向上回溯进行平衡操作，插入操作完成。需要注意，上面四张图的“叔”、“1”、“2”、“3”结点有可能为黑哨兵结点。</p>
<h2 id="红黑树删除操作"><a href="#红黑树删除操作" class="headerlink" title="红黑树删除操作"></a>红黑树删除操作</h2><p>相对于红黑树的查询和插入操作来说，删除操作相对会更复杂一些，也就是我们传说中所说的“请神容易送神难”！</p>
<p>那么如果我们删除一个节点，需要执行哪些操作呢？</p>
<ul>
<li>首先，将红黑树当作一棵二叉查找树，将该节点从二叉查找树中删除；</li>
<li>然后，通过“旋转和着色”等一系列操作来修正该树，使之重新成为一棵红黑树。</li>
</ul>
<p>下面分别解释一下这两步操作：</p>
<h3 id="第一步：将红黑树当作一棵二叉查找树，将节点删除。"><a href="#第一步：将红黑树当作一棵二叉查找树，将节点删除。" class="headerlink" title="第一步：将红黑树当作一棵二叉查找树，将节点删除。"></a>第一步：将红黑树当作一棵二叉查找树，将节点删除。</h3><p>这和“删除常规二叉查找树中删除节点的方法是一样的”，分三种情况：</p>
<ol>
<li>被删除节点为叶子节点，那么直接删除该节点就OK了；</li>
<li>被删除节点只有一个孩子节点，那么直接删除该节点，利用该节点的孩子节点直接顶替它的位置；</li>
<li>被删除节点有两个儿子，真正的删除点应该是所要删除节点的中序遍历前驱。</li>
</ol>
<h3 id="第二步：通过“旋转和着色”等一系列操作来修正该树，使之重新成为一棵红黑树。"><a href="#第二步：通过“旋转和着色”等一系列操作来修正该树，使之重新成为一棵红黑树。" class="headerlink" title="第二步：通过“旋转和着色”等一系列操作来修正该树，使之重新成为一棵红黑树。"></a>第二步：通过“旋转和着色”等一系列操作来修正该树，使之重新成为一棵红黑树。</h3><p>因为”第一步”中删除节点之后，可能会违背红黑树的特性。所以需要通过”旋转和重新着色”来修正该树，使之重新成为一棵红黑树。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="红黑树删除节点示意图"></p>
<p>由上图和第一步可以推断出，在进行删除操作时，真正的删除点必定是只有一个孩子或没有孩子的结点。而根据红黑树的性质可以得出以下两个结论：</p>
<p><strong><font color="#ff0000" size="4">1、 删除操作中真正被删除的必定是只有一个红色孩子或没有孩子的结点。</font></strong><br><strong><font color="#ff0000" size="4">2、 如果真正的删除点是一个红色结点，那么它必定是一个叶子结点。</font></strong></p>
<h1 id="完整参考代码"><a href="#完整参考代码" class="headerlink" title="完整参考代码"></a>完整参考代码</h1><p>红黑树数据结构</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * 红黑树的数据结构</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> RBTNode&lt;T&gt; mRoot;<span class="comment">// 根节点</span></div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTNode</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">		<span class="keyword">boolean</span> color;<span class="comment">// 颜色</span></div><div class="line">		T key;<span class="comment">// 关键字（键值）</span></div><div class="line">		RBTNode&lt;T&gt; left;<span class="comment">// 左孩子</span></div><div class="line">		RBTNode&lt;T&gt; right;<span class="comment">// 右孩子</span></div><div class="line">		RBTNode&lt;T&gt; parent;<span class="comment">// 父节点</span></div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">RBTNode</span><span class="params">(<span class="keyword">boolean</span> color, T key, RBTNode&lt;T&gt; left, RBTNode&lt;T&gt; right, RBTNode&lt;T&gt; parent)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>();</div><div class="line">			<span class="keyword">this</span>.color = color;</div><div class="line">			<span class="keyword">this</span>.key = key;</div><div class="line">			<span class="keyword">this</span>.left = left;</div><div class="line">			<span class="keyword">this</span>.right = right;</div><div class="line">			<span class="keyword">this</span>.parent = parent;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> T <span class="title">getkey</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> key;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">""</span> + key + (<span class="keyword">this</span>.color == RED ? <span class="string">"(R)"</span> : <span class="string">"B"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">RBTree</span><span class="params">()</span> </span>&#123;</div><div class="line">		mRoot = <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">parentOf</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> node != <span class="keyword">null</span> ? node.parent : <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">colorOf</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> node != <span class="keyword">null</span> ? node.color : BLACK;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ((node != <span class="keyword">null</span>) &amp;&amp; (node.color == RED)) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlack</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> isRed(node);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRed</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">			node.color = RED;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBlack</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">			node.color = BLACK;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(RBTNode&lt;T&gt; node, RBTNode&lt;T&gt; parent)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">			node.parent = parent;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(RBTNode&lt;T&gt; node, <span class="keyword">boolean</span> color)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">			node.color = color;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 前序遍历红黑树</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> tree</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (tree != <span class="keyword">null</span>) &#123;</div><div class="line">			System.out.print(tree.key + <span class="string">" "</span>);</div><div class="line">			preOrder(tree.left);</div><div class="line">			preOrder(tree.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		preOrder(mRoot);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 中序遍历红黑树</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> tree</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (tree != <span class="keyword">null</span>) &#123;</div><div class="line">			inOrder(tree.left);</div><div class="line">			System.out.print(tree.key + <span class="string">" "</span>);</div><div class="line">			inOrder(tree.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		inOrder(mRoot);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 后序遍历红黑树</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> tree</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (tree != <span class="keyword">null</span>) &#123;</div><div class="line">			postOrder(tree.left);</div><div class="line">			postOrder(tree.right);</div><div class="line">			System.out.print(tree.key + <span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		postOrder(mRoot);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * (递归实现)查找"红黑树x"中键值为key的节点</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> x</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">search</span><span class="params">(RBTNode&lt;T&gt; x, T key)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> x;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> cmp = key.compareTo(x.key);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> search(x.left, key);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> search(x.right, key);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> x;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> RBTNode&lt;T&gt; <span class="title">search</span><span class="params">(T key)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> search(mRoot, key);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * (非递归实现)查找"红黑树x"中键值为key的节点</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> x</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">iterativeSearch</span><span class="params">(RBTNode&lt;T&gt; x, T key)</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">int</span> cmp = key.compareTo(x.key);</div><div class="line">			<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</div><div class="line">				x = x.left;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</div><div class="line">				x = x.right;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> x;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> x;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> RBTNode&lt;T&gt; <span class="title">iterativeSearch</span><span class="params">(T key)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> iterativeSearch(key);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 查找最小结点：返回tree为根结点的红黑树的最小结点。</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> tree</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">minimum</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (tree == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (tree.left != <span class="keyword">null</span>) &#123;</div><div class="line">			tree = tree.left;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> tree;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">minimum</span><span class="params">()</span> </span>&#123;</div><div class="line">		RBTNode&lt;T&gt; p = minimum(mRoot);</div><div class="line">		<span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> p.key;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 查找最大结点：返回tree为根结点的红黑树的最大结点。</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> tree</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> RBTNode&lt;T&gt; <span class="title">maximum</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (tree == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (tree.right != <span class="keyword">null</span>) &#123;</div><div class="line">			tree = tree.right;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> tree;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">maximum</span><span class="params">()</span> </span>&#123;</div><div class="line">		RBTNode&lt;T&gt; p = maximum(mRoot);</div><div class="line">		<span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> p.key;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 找结点(x)的后继结点。即，查找"红黑树中数据值大于该结点"的"最小结点"。</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> x</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> RBTNode&lt;T&gt; <span class="title">successor</span><span class="params">(RBTNode&lt;T&gt; x)</span> </span>&#123;</div><div class="line">		<span class="comment">// 如果x存在右孩子，则"x的后继结点"为 "以其右孩子为根的子树的最小结点"。</span></div><div class="line">		<span class="keyword">if</span> (x.right != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> minimum(x.right);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 如果x没有右孩子。则x有以下两种可能：</span></div><div class="line">		<span class="comment">// (01) x是"一个左孩子"，则"x的后继结点"为 "它的父结点"。</span></div><div class="line">		<span class="comment">// (02) x是"一个右孩子"，则查找"x的最低的父结点，并且该父结点要具有左孩子"，找到的这个"最低的父结点"就是"x的后继结点"。</span></div><div class="line">		RBTNode&lt;T&gt; y = x.parent;</div><div class="line">		<span class="keyword">while</span> ((y != <span class="keyword">null</span>) &amp;&amp; (x == y.right)) &#123;</div><div class="line">			x = y;</div><div class="line">			y = y.parent;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> y;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 找结点(x)的前驱结点。即，查找"红黑树中数据值小于该结点"的"最大结点"。</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> x</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> RBTNode&lt;T&gt; <span class="title">predecessor</span><span class="params">(RBTNode&lt;T&gt; x)</span> </span>&#123;</div><div class="line">		<span class="comment">// 如果x存在左孩子，则"x的前驱结点"为 "以其左孩子为根的子树的最大结点"。</span></div><div class="line">		<span class="keyword">if</span> (x.left != <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> maximum(x.left);</div><div class="line"></div><div class="line">		<span class="comment">// 如果x没有左孩子。则x有以下两种可能：</span></div><div class="line">		<span class="comment">// (01) x是"一个右孩子"，则"x的前驱结点"为 "它的父结点"。</span></div><div class="line">		<span class="comment">// (01) x是"一个左孩子"，则查找"x的最低的父结点，并且该父结点要具有右孩子"，找到的这个"最低的父结点"就是"x的前驱结点"。</span></div><div class="line">		RBTNode&lt;T&gt; y = x.parent;</div><div class="line">		<span class="keyword">while</span> ((y != <span class="keyword">null</span>) &amp;&amp; (x == y.left)) &#123;</div><div class="line">			x = y;</div><div class="line">			y = y.parent;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> y;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">/* 对红黑树的节点(x)进行左旋转</span></div><div class="line">  *</div><div class="line">  * 左旋示意图(对节点x进行左旋)：</div><div class="line">  *      px                              px</div><div class="line">  *     /                               /</div><div class="line">  *    x                               y                </div><div class="line">  *   /  \      --(左旋)-.            / \                #</div><div class="line">  *  lx   y                          x  ry     </div><div class="line">  *     /   \                       /  \</div><div class="line">  *    ly   ry                     lx  ly  </div><div class="line">  *</div><div class="line">  *</div><div class="line">  */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBTNode&lt;T&gt; x)</span> </span>&#123;</div><div class="line">		<span class="comment">// 设置x的右孩子为y</span></div><div class="line">		RBTNode&lt;T&gt; y = x.right;</div><div class="line"></div><div class="line">		<span class="comment">// 将 “y的左孩子” 设为 “x的右孩子”；</span></div><div class="line">		<span class="comment">// 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span></div><div class="line">		x.right = y.left;</div><div class="line">		<span class="keyword">if</span> (y.left != <span class="keyword">null</span>)</div><div class="line">			y.left.parent = x;</div><div class="line"></div><div class="line">		<span class="comment">// 将 “x的父亲” 设为 “y的父亲”</span></div><div class="line">		y.parent = x.parent;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (x.parent == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.mRoot = y; <span class="comment">// 如果 “x的父亲” 是空节点，则将y设为根节点</span></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (x.parent.left == x)</div><div class="line">				x.parent.left = y; <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></div><div class="line">			<span class="keyword">else</span></div><div class="line">				x.parent.right = y; <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 将 “x” 设为 “y的左孩子”</span></div><div class="line">		y.left = x;</div><div class="line">		<span class="comment">// 将 “x的父节点” 设为 “y”</span></div><div class="line">		x.parent = y;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*       </span></div><div class="line">     * 对红黑树的节点(y)进行右旋转</div><div class="line">     *</div><div class="line">     * 右旋示意图(对节点y进行左旋)：</div><div class="line">     *            py                               py</div><div class="line">     *           /                                /</div><div class="line">     *          y                                x                  </div><div class="line">     *         /  \      --(右旋)-.             /  \                     #</div><div class="line">     *        x   ry                           lx   y  </div><div class="line">     *       / \                                   / \                   #</div><div class="line">     *      lx  rx                                rx  ry</div><div class="line">     *</div><div class="line">     */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBTNode&lt;T&gt; y)</span> </span>&#123;</div><div class="line">		<span class="comment">// 设置x是当前节点的左孩子。</span></div><div class="line">		RBTNode&lt;T&gt; x = y.left;</div><div class="line"></div><div class="line">		<span class="comment">// 将 “x的右孩子” 设为 “y的左孩子”；</span></div><div class="line">		<span class="comment">// 如果"x的右孩子"不为空的话，将 “y” 设为 “x的右孩子的父亲”</span></div><div class="line">		y.left = x.right;</div><div class="line">		<span class="keyword">if</span> (x.right != <span class="keyword">null</span>)</div><div class="line">			x.right.parent = y;</div><div class="line"></div><div class="line">		<span class="comment">// 将 “y的父亲” 设为 “x的父亲”</span></div><div class="line">		x.parent = y.parent;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (y.parent == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.mRoot = x; <span class="comment">// 如果 “y的父亲” 是空节点，则将x设为根节点</span></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (y == y.parent.right)</div><div class="line">				y.parent.right = x; <span class="comment">// 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span></div><div class="line">			<span class="keyword">else</span></div><div class="line">				y.parent.left = x; <span class="comment">// (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 将 “y” 设为 “x的右孩子”</span></div><div class="line">		x.right = y;</div><div class="line"></div><div class="line">		<span class="comment">// 将 “y的父节点” 设为 “x”</span></div><div class="line">		y.parent = x;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertFixUp</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">		RBTNode&lt;T&gt; parent, gparent;</div><div class="line"></div><div class="line">		<span class="comment">// 若“父节点存在，并且父节点的颜色是红色”</span></div><div class="line">		<span class="keyword">while</span> (((parent = parentOf(node)) != <span class="keyword">null</span>) &amp;&amp; isRed(parent)) &#123;</div><div class="line">			gparent = parentOf(parent);</div><div class="line"></div><div class="line">			<span class="comment">// 若“父节点”是“祖父节点的左孩子”</span></div><div class="line">			<span class="keyword">if</span> (parent == gparent.left) &#123;</div><div class="line">				<span class="comment">// Case 1条件：叔叔节点是红色</span></div><div class="line">				RBTNode&lt;T&gt; uncle = gparent.right;</div><div class="line">				<span class="keyword">if</span> ((uncle != <span class="keyword">null</span>) &amp;&amp; isRed(uncle)) &#123;</div><div class="line">					setBlack(uncle);</div><div class="line">					setBlack(parent);</div><div class="line">					setRed(gparent);</div><div class="line">					node = gparent;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125; <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是右孩子</span></div><div class="line">				<span class="keyword">if</span> (parent.right == node) &#123;</div><div class="line">					RBTNode&lt;T&gt; tmp;</div><div class="line">					leftRotate(parent);</div><div class="line">					tmp = parent;</div><div class="line">					parent = node;</div><div class="line">					node = tmp;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Case 3条件：叔叔是黑色，且当前节点是左孩子。</span></div><div class="line">				setBlack(parent);</div><div class="line">				setRed(gparent);</div><div class="line">				rightRotate(gparent);</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 若“z的父节点”是“z的祖父节点的右孩子”</span></div><div class="line">				<span class="comment">// Case 1条件：叔叔节点是红色</span></div><div class="line">				RBTNode&lt;T&gt; uncle = gparent.left;</div><div class="line">				<span class="keyword">if</span> ((uncle != <span class="keyword">null</span>) &amp;&amp; isRed(uncle)) &#123;</div><div class="line">					setBlack(uncle);</div><div class="line">					setBlack(parent);</div><div class="line">					setRed(gparent);</div><div class="line">					node = gparent;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Case 2条件：叔叔是黑色，且当前节点是左孩子</span></div><div class="line">				<span class="keyword">if</span> (parent.left == node) &#123;</div><div class="line">					RBTNode&lt;T&gt; tmp;</div><div class="line">					rightRotate(parent);</div><div class="line">					tmp = parent;</div><div class="line">					parent = node;</div><div class="line">					node = tmp;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Case 3条件：叔叔是黑色，且当前节点是右孩子。</span></div><div class="line">				setBlack(parent);</div><div class="line">				setRed(gparent);</div><div class="line">				leftRotate(gparent);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 将根节点设为黑色</span></div><div class="line">		setBlack(<span class="keyword">this</span>.mRoot);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 将结点插入到红黑树中</div><div class="line">	 *</div><div class="line">	 * 参数说明： node 插入的结点 // 对应《算法导论》中的node</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> cmp;</div><div class="line">		RBTNode&lt;T&gt; y = <span class="keyword">null</span>;</div><div class="line">		RBTNode&lt;T&gt; x = <span class="keyword">this</span>.mRoot;</div><div class="line"></div><div class="line">		<span class="comment">// 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span></div><div class="line">		<span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</div><div class="line">			y = x;</div><div class="line">			cmp = node.key.compareTo(x.key);</div><div class="line">			<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">				x = x.left;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				x = x.right;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		node.parent = y;</div><div class="line">		<span class="keyword">if</span> (y != <span class="keyword">null</span>) &#123;</div><div class="line">			cmp = node.key.compareTo(y.key);</div><div class="line">			<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">				y.left = node;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				y.right = node;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.mRoot = node;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 2. 设置节点的颜色为红色</span></div><div class="line">		node.color = RED;</div><div class="line"></div><div class="line">		<span class="comment">// 3. 将它重新修正为一颗二叉查找树</span></div><div class="line">		insertFixUp(node);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 新建结点(key)，并将其插入到红黑树中</div><div class="line">	 *</div><div class="line">	 * 参数说明： key 插入结点的键值</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T key)</span> </span>&#123;</div><div class="line">		RBTNode&lt;T&gt; node = <span class="keyword">new</span> RBTNode&lt;T&gt;(BLACK, key, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 如果新建结点失败，则返回。</span></div><div class="line">		<span class="keyword">if</span> (node != <span class="keyword">null</span>)</div><div class="line">			insert(node);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 红黑树删除修正函数</div><div class="line">	 *</div><div class="line">	 * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数； 目的是将它重新塑造成一颗红黑树。</div><div class="line">	 *</div><div class="line">	 * 参数说明： node 待修正的节点</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeFixUp</span><span class="params">(RBTNode&lt;T&gt; node, RBTNode&lt;T&gt; parent)</span> </span>&#123;</div><div class="line">		RBTNode&lt;T&gt; other;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> ((node == <span class="keyword">null</span> || isBlack(node)) &amp;&amp; (node != <span class="keyword">this</span>.mRoot)) &#123;</div><div class="line">			<span class="keyword">if</span> (parent.left == node) &#123;</div><div class="line">				other = parent.right;</div><div class="line">				<span class="keyword">if</span> (isRed(other)) &#123;</div><div class="line">					<span class="comment">// Case 1: x的兄弟w是红色的</span></div><div class="line">					setBlack(other);</div><div class="line">					setRed(parent);</div><div class="line">					leftRotate(parent);</div><div class="line">					other = parent.right;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> ((other.left == <span class="keyword">null</span> || isBlack(other.left)) &amp;&amp; (other.right == <span class="keyword">null</span> || isBlack(other.right))) &#123;</div><div class="line">					<span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的</span></div><div class="line">					setRed(other);</div><div class="line">					node = parent;</div><div class="line">					parent = parentOf(node);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">					<span class="keyword">if</span> (other.right == <span class="keyword">null</span> || isBlack(other.right)) &#123;</div><div class="line">						<span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。</span></div><div class="line">						setBlack(other.left);</div><div class="line">						setRed(other);</div><div class="line">						rightRotate(other);</div><div class="line">						other = parent.right;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></div><div class="line">					setColor(other, colorOf(parent));</div><div class="line">					setBlack(parent);</div><div class="line">					setBlack(other.right);</div><div class="line">					leftRotate(parent);</div><div class="line">					node = <span class="keyword">this</span>.mRoot;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">				other = parent.left;</div><div class="line">				<span class="keyword">if</span> (isRed(other)) &#123;</div><div class="line">					<span class="comment">// Case 1: x的兄弟w是红色的</span></div><div class="line">					setBlack(other);</div><div class="line">					setRed(parent);</div><div class="line">					rightRotate(parent);</div><div class="line">					other = parent.left;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> ((other.left == <span class="keyword">null</span> || isBlack(other.left)) &amp;&amp; (other.right == <span class="keyword">null</span> || isBlack(other.right))) &#123;</div><div class="line">					<span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的</span></div><div class="line">					setRed(other);</div><div class="line">					node = parent;</div><div class="line">					parent = parentOf(node);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">					<span class="keyword">if</span> (other.left == <span class="keyword">null</span> || isBlack(other.left)) &#123;</div><div class="line">						<span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。</span></div><div class="line">						setBlack(other.right);</div><div class="line">						setRed(other);</div><div class="line">						leftRotate(other);</div><div class="line">						other = parent.left;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					<span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></div><div class="line">					setColor(other, colorOf(parent));</div><div class="line">					setBlack(parent);</div><div class="line">					setBlack(other.left);</div><div class="line">					rightRotate(parent);</div><div class="line">					node = <span class="keyword">this</span>.mRoot;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (node != <span class="keyword">null</span>)</div><div class="line">			setBlack(node);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 删除结点(node)，并返回被删除的结点</div><div class="line">	 *</div><div class="line">	 * 参数说明： node 删除的结点</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(RBTNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">		RBTNode&lt;T&gt; child, parent;</div><div class="line">		<span class="keyword">boolean</span> color;</div><div class="line"></div><div class="line">		<span class="comment">// 被删除节点的"左右孩子都不为空"的情况。</span></div><div class="line">		<span class="keyword">if</span> ((node.left != <span class="keyword">null</span>) &amp;&amp; (node.right != <span class="keyword">null</span>)) &#123;</div><div class="line">			<span class="comment">// 被删节点的后继节点。(称为"取代节点")</span></div><div class="line">			<span class="comment">// 用它来取代"被删节点"的位置，然后再将"被删节点"去掉。</span></div><div class="line">			RBTNode&lt;T&gt; replace = node;</div><div class="line"></div><div class="line">			<span class="comment">// 获取后继节点</span></div><div class="line">			replace = replace.right;</div><div class="line">			<span class="keyword">while</span> (replace.left != <span class="keyword">null</span>)</div><div class="line">				replace = replace.left;</div><div class="line"></div><div class="line">			<span class="comment">// "node节点"不是根节点(只有根节点不存在父节点)</span></div><div class="line">			<span class="keyword">if</span> (parentOf(node) != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (parentOf(node).left == node)</div><div class="line">					parentOf(node).left = replace;</div><div class="line">				<span class="keyword">else</span></div><div class="line">					parentOf(node).right = replace;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// "node节点"是根节点，更新根节点。</span></div><div class="line">				<span class="keyword">this</span>.mRoot = replace;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// child是"取代节点"的右孩子，也是需要"调整的节点"。</span></div><div class="line">			<span class="comment">// "取代节点"肯定不存在左孩子！因为它是一个后继节点。</span></div><div class="line">			child = replace.right;</div><div class="line">			parent = parentOf(replace);</div><div class="line">			<span class="comment">// 保存"取代节点"的颜色</span></div><div class="line">			color = colorOf(replace);</div><div class="line"></div><div class="line">			<span class="comment">// "被删除节点"是"它的后继节点的父节点"</span></div><div class="line">			<span class="keyword">if</span> (parent == node) &#123;</div><div class="line">				parent = replace;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// child不为空</span></div><div class="line">				<span class="keyword">if</span> (child != <span class="keyword">null</span>)</div><div class="line">					setParent(child, parent);</div><div class="line">				parent.left = child;</div><div class="line"></div><div class="line">				replace.right = node.right;</div><div class="line">				setParent(node.right, replace);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			replace.parent = node.parent;</div><div class="line">			replace.color = node.color;</div><div class="line">			replace.left = node.left;</div><div class="line">			node.left.parent = replace;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (color == BLACK)</div><div class="line">				removeFixUp(child, parent);</div><div class="line"></div><div class="line">			node = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</div><div class="line">			child = node.left;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			child = node.right;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		parent = node.parent;</div><div class="line">		<span class="comment">// 保存"取代节点"的颜色</span></div><div class="line">		color = node.color;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (child != <span class="keyword">null</span>)</div><div class="line">			child.parent = parent;</div><div class="line"></div><div class="line">		<span class="comment">// "node节点"不是根节点</span></div><div class="line">		<span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (parent.left == node)</div><div class="line">				parent.left = child;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				parent.right = child;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.mRoot = child;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (color == BLACK)</div><div class="line">			removeFixUp(child, parent);</div><div class="line">		node = <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 删除结点(z)，并返回被删除的结点</div><div class="line">	 *</div><div class="line">	 * 参数说明： tree 红黑树的根结点 z 删除的结点</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T key)</span> </span>&#123;</div><div class="line">		RBTNode&lt;T&gt; node;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> ((node = search(mRoot, key)) != <span class="keyword">null</span>)</div><div class="line">			remove(node);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 销毁红黑树</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">(RBTNode&lt;T&gt; tree)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (tree == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (tree.left != <span class="keyword">null</span>)</div><div class="line">			destroy(tree.left);</div><div class="line">		<span class="keyword">if</span> (tree.right != <span class="keyword">null</span>)</div><div class="line">			destroy(tree.right);</div><div class="line"></div><div class="line">		tree = <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">		destroy(mRoot);</div><div class="line">		mRoot = <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 打印"红黑树"</div><div class="line">	 *</div><div class="line">	 * key -- 节点的键值 direction -- 0，表示该节点是根节点; -1，表示该节点是它的父结点的左孩子;</div><div class="line">	 * 1，表示该节点是它的父结点的右孩子。</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(RBTNode&lt;T&gt; tree, T key, <span class="keyword">int</span> direction)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (tree != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (direction == <span class="number">0</span>) <span class="comment">// tree是根节点</span></div><div class="line">				System.out.printf(<span class="string">"%2d(B) is root\n"</span>, tree.key);</div><div class="line">			<span class="keyword">else</span> <span class="comment">// tree是分支节点</span></div><div class="line">				System.out.printf(<span class="string">"%2d(%s) is %2d's %6s child\n"</span>, tree.key, isRed(tree) ? <span class="string">"R"</span> : <span class="string">"B"</span>, key,</div><div class="line">						direction == <span class="number">1</span> ? <span class="string">"right"</span> : <span class="string">"left"</span>);</div><div class="line"></div><div class="line">			print(tree.left, tree.key, -<span class="number">1</span>);</div><div class="line">			print(tree.right, tree.key, <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (mRoot != <span class="keyword">null</span>)</div><div class="line">			print(mRoot, mRoot.key, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>红黑树Demo测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.tree;</div><div class="line"></div><div class="line"><span class="keyword">import</span> datastructure.RBTree;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * 红黑树</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTreeDemo</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a[] = &#123; <span class="number">23</span>, <span class="number">16</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">26</span>, <span class="number">32</span>, <span class="number">13</span>, <span class="number">30</span>,<span class="number">49</span> &#125;;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mDebugInsert = <span class="keyword">false</span>; <span class="comment">// "插入"动作的检测开关(false，关闭；true，打开)</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mDebugDelete = <span class="keyword">false</span>; <span class="comment">// "删除"动作的检测开关(false，关闭；true，打开)</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i, ilen = a.length;</div><div class="line">		RBTree&lt;Integer&gt; tree = <span class="keyword">new</span> RBTree&lt;Integer&gt;();</div><div class="line"></div><div class="line">		System.out.printf(<span class="string">"== 原始数据: "</span>);</div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ilen; i++)</div><div class="line">			System.out.printf(<span class="string">"%d "</span>, a[i]);</div><div class="line">		System.out.printf(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ilen; i++) &#123;</div><div class="line">			tree.insert(a[i]);</div><div class="line">			<span class="comment">// 设置mDebugInsert=true,测试"添加函数"</span></div><div class="line">			<span class="keyword">if</span> (mDebugInsert) &#123;</div><div class="line">				System.out.printf(<span class="string">"== 添加节点: %d\n"</span>, a[i]);</div><div class="line">				System.out.printf(<span class="string">"== 树的详细信息: \n"</span>);</div><div class="line">				tree.print();</div><div class="line">				System.out.printf(<span class="string">"\n"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.printf(<span class="string">"== 前序遍历: "</span>);</div><div class="line">		tree.preOrder();</div><div class="line"></div><div class="line">		System.out.printf(<span class="string">"\n== 中序遍历: "</span>);</div><div class="line">		tree.inOrder();</div><div class="line"></div><div class="line">		System.out.printf(<span class="string">"\n== 后序遍历: "</span>);</div><div class="line">		tree.postOrder();</div><div class="line">		System.out.printf(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">		System.out.printf(<span class="string">"== 最小值: %s\n"</span>, tree.minimum());</div><div class="line">		System.out.printf(<span class="string">"== 最大值: %s\n"</span>, tree.maximum());</div><div class="line">		System.out.printf(<span class="string">"== 树的详细信息: \n"</span>);</div><div class="line">		tree.print();</div><div class="line">		System.out.printf(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 设置mDebugDelete=true,测试"删除函数"</span></div><div class="line">		<span class="keyword">if</span> (mDebugDelete) &#123;</div><div class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ilen; i++) &#123;</div><div class="line">				tree.remove(a[i]);</div><div class="line"></div><div class="line">				System.out.printf(<span class="string">"== 删除节点: %d\n"</span>, a[i]);</div><div class="line">				System.out.printf(<span class="string">"== 树的详细信息: \n"</span>);</div><div class="line">				tree.print();</div><div class="line">				System.out.printf(<span class="string">"\n"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 销毁二叉树</span></div><div class="line">		tree.clear();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">== 原始数据: 23 16 29 12 18 26 32 13 30 49</div><div class="line">== 前序遍历: 23 16 12 13 18 29 26 32 30 49</div><div class="line">== 中序遍历: 12 13 16 18 23 26 29 30 32 49</div><div class="line">== 后序遍历: 13 12 18 16 26 30 49 32 29 23</div><div class="line">== 最小值: 12</div><div class="line">== 最大值: 49</div><div class="line">== 树的详细信息:</div><div class="line">23(B) is root</div><div class="line">16(R) is 23&apos;s   left child</div><div class="line">12(B) is 16&apos;s   left child</div><div class="line">13(R) is 12&apos;s  right child</div><div class="line">18(B) is 16&apos;s  right child</div><div class="line">29(R) is 23&apos;s  right child</div><div class="line">26(B) is 29&apos;s   left child</div><div class="line">32(B) is 29&apos;s  right child</div><div class="line">30(R) is 32&apos;s   left child</div><div class="line">49(R) is 32&apos;s  right child</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《大话数据结构》<br><a href="http://www.tuicool.com/articles/J3iMf2R" target="_blank" rel="external">http://www.tuicool.com/articles/J3iMf2R</a><br><a href="http://blog.csdn.net/eric491179912/article/details/6179908" target="_blank" rel="external">http://blog.csdn.net/eric491179912/article/details/6179908</a><br><a href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html" target="_blank" rel="external">http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html</a><br><a href="http://www.cnblogs.com/daoluanxiaozi/p/3340382.html" target="_blank" rel="external">http://www.cnblogs.com/daoluanxiaozi/p/3340382.html</a><br><a href="http://blog.csdn.net/loongshawn/article/details/50414608" target="_blank" rel="external">http://blog.csdn.net/loongshawn/article/details/50414608</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h1&gt;&lt;h2 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="红黑树" scheme="http://akathink.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
      <category term="树" scheme="http://akathink.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂Android安全架构:基础篇</title>
    <link href="http://akathink.com/2016/08/05/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Android%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84:%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://akathink.com/2016/08/05/彻底搞懂Android安全架构:基础篇/</id>
    <published>2016-08-05T02:21:52.000Z</published>
    <updated>2016-08-08T12:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安全要解决什么问题？"><a href="#安全要解决什么问题？" class="headerlink" title="安全要解决什么问题？"></a>安全要解决什么问题？</h1><ul>
<li>保密（Security、Confidentiality）：只想让部分有权限的人知晓，其他人是看不到的；</li>
<li>鉴别、认证（Authentication）：确保通信的对方就是自己信得过的人；</li>
<li>完整性（Integrity）：能够验证信息在传输过程中是否发生了篡改，或者数据丢失等现象</li>
<li>不可否认性（Non-repudiation）：谁发的信息，能够表明发送者等身份。</li>
</ul>
<p>一些常用术语：</p>
<ul>
<li>密钥：分为加密密钥和解密密钥。</li>
<li>明文：没有进行加密，能够直接代表原文含义的信息。</li>
<li>密文：经过加密处理之后，隐藏原文含义的信息。</li>
<li>加密：将原文转换成密文的实施过程。</li>
<li>解密：将密文转换成明文的实施过程。</li>
</ul>
<h1 id="密码术"><a href="#密码术" class="headerlink" title="密码术"></a>密码术</h1><p>说到密码术似乎感觉很高大上，这不都是各种谍战片里面经常出现的吗？其实，在我们现实生活中，多多少少也会接触一些简单的密码术，例如：字母加密、藏头诗、倒写文等。我们可以采用任何规则来定义密码术，但是通常我们并不会自己去写新的密码术，为什么呢？</p>
<p>这主要是因为：</p>
<ol>
<li>安全性：没有经过验证的密码术，确保不了该密码术一定安全。</li>
<li>密码术里面是否有后门，因为自己定义的密码术不公开，不知道里面是否包含一些其他后门的类似程序。</li>
</ol>
<p>概括来讲，加密主要分为：<strong><font color="#00ffff" size="4">置换加密</font></strong> 、<strong><font color="#00ffff" size="4">转置加密</font></strong>、<strong><font color="#00ffff" size="4">乘积加密</font></strong>（多次置换加密和转置加密的混合使用）。</p>
<h1 id="加密模型"><a href="#加密模型" class="headerlink" title="加密模型"></a>加密模型</h1><p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%9E%8B.png" alt="加密模型"></p>
<h2 id="对称加密模型"><a href="#对称加密模型" class="headerlink" title="对称加密模型"></a>对称加密模型</h2><ul>
<li><p>DES</p>
</li>
<li><p>AES</p>
</li>
<li><p>应用场景</p>
</li>
<li><p>存在的问题：密钥如何交换？</p>
</li>
</ul>
<h2 id="非对称加密模型"><a href="#非对称加密模型" class="headerlink" title="非对称加密模型"></a>非对称加密模型</h2><p>下面首先通过一个例子来简单说明公钥私钥、数字签名、消息摘要是什么，然后再详细分析非对称加密模型里面的重要知识点:</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%AF%86%E9%92%A5%E7%94%B1%E8%B0%81%E4%BA%A7%E7%94%9F.jpg" alt="产生公钥和私钥"><br>鲍勃采用某种产生密钥的算法，生成两把密钥：一把是公钥，一把是私钥。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%B0%86%E5%85%AC%E9%92%A5%E5%85%AC%E5%BC%80.jpg" alt="将公钥公开"><br>鲍勃将自己的公钥发送给他的朋友－－帕蒂、道格、苏珊－－每人一把，以后谁想给鲍勃写私密邮件，则可以使用该公钥进行加密。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86.jpg" alt="采用公钥加密"><br>现在苏珊想给鲍勃写一封保密邮件，他写完之后用鲍勃的公钥加密，就可以达到保密的效果。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E9%87%87%E7%94%A8%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86.jpg" alt="采用私钥解密"><br>鲍勃收到信之后，用自己的私钥解密，看到了信件的内容。这里要强调的是，只要鲍勃的私钥不泄漏，这封信就是安全的，即使落在别人的手里，也无法解密。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%EF%BC%8C%E7%94%9F%E6%88%90%E6%91%98%E8%A6%81.jpg" alt="使用数字签名，生成摘要"><br>鲍勃给苏珊回信，决定采用“数字签名”。他写完之后先用Hash函数，生成信件的摘要（Digest）。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%AF%B9%E6%91%98%E8%A6%81%E5%8A%A0%E5%AF%86%EF%BC%8C%E7%94%9F%E6%88%90%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.jpg" alt="对摘要进行加密，生成数字签名"><br>然后，鲍勃再使用私钥对这个摘要加密，生成“数字签名”。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%B0%86%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E9%99%84%E5%9C%A8%E4%BF%A1%E4%BB%B6%E7%9A%84%E4%B8%8B%E9%9D%A2.jpg" alt="将数字签名附在信件的下面"><br>鲍勃将这个签名附在邮件下方，一起发给苏珊。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E9%87%87%E7%94%A8%E5%85%AC%E9%92%A5%E8%A7%A3%E5%AF%86.jpg" alt="采用公钥解密"><br>苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E6%AF%94%E5%AF%B9%E6%91%98%E8%A6%81%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C.jpg" alt="比对摘要是否相同"><br>苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行比对。如果两者一致，就证明这封信未被修改过。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%81%87%E7%9A%84%E5%85%AC%E9%92%A5.jpg" alt="假的公钥"><br>复杂的情况出现了，道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.jpg" alt="使用数字证书"><br>后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%AD%BE%E5%90%8D%E7%9A%84%E5%90%8C%E6%97%B6%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.jpg" alt="签名的同时，再加上数字证书"><br>鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%94%A8CA%E7%9A%84%E5%85%AC%E9%92%A5%E8%A7%A3%E5%BC%80%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.jpg" alt="用CA的公钥揭开数字证书将"><br>苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。</p>
<ul>
<li>公钥和私钥</li>
</ul>
<p>通过上面的例子，我们可以很轻松的知道，公钥和私钥都是由鲍勃产生的，私钥由自己保管，公钥交可以交给任何人。</p>
<p>应用场景：</p>
<ul>
<li>公钥算法的理论基石<br>数学是科学之基<br>基础学科研究之物，虚虚实实，先虚后实<br>公钥算法的最重要的两大数学基础<br>  建立在分解大数的困难度<br>  建立在以大素数为模来计算离散对数的困难度</li>
<li>RSA算法<br>  RSA的名字由来？就是三个科学家的名字首字母的组合<br>  建立在分解大数的困难度<br>  公钥私钥的长度至少1024bit</li>
</ul>
<p>两大加密模型的优缺点：</p>
<pre><code>优点：相对于非对称加密非常高效。
缺点：密钥交换问题
     不如RSA的加密安全程度高，但是当选择256bit的AES时，仍然能胜任绝大多数的安全领域
</code></pre><p>非对称加密的优缺点：</p>
<pre><code>优点：安全性足够高
     没有密钥交换的问题
缺点：效率低，对于大数据加密很慢
</code></pre><h1 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h1><h2 id="实际的保密会话场景："><a href="#实际的保密会话场景：" class="headerlink" title="实际的保密会话场景："></a>实际的保密会话场景：</h2><ul>
<li>基于高效的 <strong><font color="#00ffff" size="4">对称加密</font></strong> 算法对会话进行加密</li>
<li>会话密钥实时产生且周期性变化</li>
<li>基于其他足够安全的方式进行会话密钥的传输和交换</li>
</ul>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%AE%9E%E9%99%85%E7%9A%84%E4%BC%9A%E8%AF%9D%E5%9C%BA%E6%99%AF.jpg" alt="实际的保密会话应用场景"></p>
<h2 id="利用公钥密钥来交换会话密钥"><a href="#利用公钥密钥来交换会话密钥" class="headerlink" title="利用公钥密钥来交换会话密钥"></a>利用公钥密钥来交换会话密钥</h2><ul>
<li>实时随机的会话密钥产生</li>
<li>使用对端的的公钥对产生的会话密钥加密并传递给对端</li>
<li>对段使用私钥解密获取会话密钥</li>
<li>双方开始基于共享的会话密钥进行对称加密的保密会话通信<br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%88%A9%E7%94%A8%E5%85%AC%E9%92%A5%E6%9D%A5%E4%BA%A4%E6%8D%A2%E4%BC%9A%E8%AF%9D%E5%AF%86%E9%92%A5.jpg" alt="利用公钥密钥来交换会话密钥"></li>
</ul>
<h2 id="其他的密钥交换方式"><a href="#其他的密钥交换方式" class="headerlink" title="其他的密钥交换方式"></a>其他的密钥交换方式</h2><p>Diffie-Hellman密钥交换协议</p>
<ul>
<li>基于以大素数为模计算离散对数的困难度</li>
<li>双方各自选定Key，然后以一定算法变换（使得Key不以明文传输）后传输给对方</li>
<li>双方利用对方交换过来的数据和自己选定的key做变换，获得一个一致的结果，作为会话密钥<br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%85%B6%E4%BB%96%E7%9A%84%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2.jpg" alt="其他的密钥交换方式"></li>
</ul>
<h1 id="消息摘要"><a href="#消息摘要" class="headerlink" title="消息摘要"></a>消息摘要</h1><ul>
<li>Hash与散列函数的定义与特点<br>定义：变长的输入变成定长的输出。<br>特点：</li>
</ul>
<p>易变性：即便原始信息发生1bit的变化，Hash的输出将会有不可预知的巨大变化。<br>不可逆性：通过Hash的结果构造出满足的输入信息是不可能的，或者极其困难的。</p>
<p>常见的Hash算法：MD5（128位）、SHA1（160位）</p>
<ul>
<li>消息摘要和数字指纹</li>
</ul>
<p>人的指纹的特点：<br>    双胞胎的指纹不同<br>    通过指纹猜不出它的主人<br>与Hash的对应关系：<br>    易变性<br>    不可逆<br>数字指纹由此而来，通过对消息采用某种Hash算法得到的输出就是消息摘要，也叫数字指纹。</p>
<ul>
<li>Hash的应用场景</li>
</ul>
<ol>
<li>防篡改<br> 基于易变特性<br> 保证完整性<br> 示例：<br> 网络下载某个文件时，都会指定该文件的一个MD5值，确保文件没有被替换<br> 消息传送时尾部额外传MD</li>
<li><p>防损坏<br> 基于易变特性<br> 保证完整性<br> 示例：<br> CRC校验的作用和不足<br> MD校验消息恶劣环境传输的完整性和未受损坏<br> 应用程序中对于核心文件／数据库读写的鲁棒性保护，防止掉电和Crash</p>
</li>
<li><p>认证<br> 基于不可逆特性<br> 可认证对端<br> 示例：<br> HTTP的Basic和Digest认证<br> PPP的PAP和CHAP认证<br> 手机登陆密码和隐藏MMI的设计</p>
</li>
</ol>
<ul>
<li><p>HMAC<br>  我们遇到了什么问题？<br>  直接尾部附带消息摘要的问题（篡改内容的同时篡改摘要）<br>  直接对密码做Hash传输的认证的问题（重放攻击）</p>
<p>  HMAC怎么解决的？<br>  HMAC就是使用Key对原始信息变换后再进行Hash</p>
</li>
</ul>
<h1 id="电子签名"><a href="#电子签名" class="headerlink" title="电子签名"></a>电子签名</h1><h2 id="签名要解决什么问题？"><a href="#签名要解决什么问题？" class="headerlink" title="签名要解决什么问题？"></a>签名要解决什么问题？</h2><ul>
<li>签什么？<br>签的内容的完整性保护</li>
<li>谁在签<br>签名人的不可否认性<h2 id="公钥密码术的两面性"><a href="#公钥密码术的两面性" class="headerlink" title="公钥密码术的两面性"></a>公钥密码术的两面性</h2></li>
</ul>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E6%9C%AF%E7%9A%84%E4%B8%A4%E9%9D%A2%E6%80%A7.png" alt="公钥密码术的两面性"></p>
<p>通过上面的图例说明我们知道对于公钥密码术，我们不仅可以使用公钥加密，反过来也可以通过公钥来实现电子签名。</p>
<h1 id="证书与PKI"><a href="#证书与PKI" class="headerlink" title="证书与PKI"></a>证书与PKI</h1><ul>
<li>证书的作用</li>
</ul>
<ol>
<li><p>证书的存储和交换<br>公钥作为一个字段存储于数字证书中<br>证书的交换和传输即可传输／交换公钥</p>
</li>
<li><p>现代信任基石</p>
</li>
</ol>
<p>证书只是存储和交换公钥的吗？那我不可以吧公钥直接作为一个文件来存储和交换吗？<br>另外，我不可以篡改证书吗？我作为第三者，篡改苏珊发给鲍勃的证书，把里面的公钥改成我自己的，由此来HACK别人发给鲍勃的信息。<br>利用签名来保护数字证书本身。</p>
<ul>
<li>证书链和PKI</li>
</ul>
<p>根证书自签名，非根证书父签名<br>证书的限制：约束、拥堵、有效期</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.youdzone.com/signature.html" target="_blank" rel="external">http://www.youdzone.com/signature.html</a><br><a href="http://www.jikexueyuan.com/course/32_7.html?ss=1" target="_blank" rel="external">http://www.jikexueyuan.com/course/32_7.html?ss=1</a><br><a href="http://www.cnblogs.com/f1194361820/archive/2015/01/29/4260025.html" target="_blank" rel="external">http://www.cnblogs.com/f1194361820/archive/2015/01/29/4260025.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安全要解决什么问题？&quot;&gt;&lt;a href=&quot;#安全要解决什么问题？&quot; class=&quot;headerlink&quot; title=&quot;安全要解决什么问题？&quot;&gt;&lt;/a&gt;安全要解决什么问题？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;保密（Security、Confidentiality）：只想让
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="Android" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Android/"/>
    
      <category term="安全" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Android/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="Android" scheme="http://akathink.com/tags/Android/"/>
    
      <category term="安全" scheme="http://akathink.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>排序二：快速排序</title>
    <link href="http://akathink.com/2016/08/03/%E6%8E%92%E5%BA%8F%E4%BA%8C%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://akathink.com/2016/08/03/排序二：快速排序/</id>
    <published>2016-08-03T02:26:25.000Z</published>
    <updated>2016-08-08T13:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><p>快速排序是一种交换排序。<br>快速排序最早是由图灵获得者Tony Hoare设计出来的，被列为20世纪十大算法之一。</p>
<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a><strong><font color="#00ffff" size="4">算法思想</font></strong></h2><p>通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序的目的。</p>
<p>从上面的文字描述理解起来可能很费力，下面直接通过图解的方式来说明：</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="快速排序示例图"><br>通过上面的图解分析我们知道第一轮排序结束，得到的序列为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>，<span class="number">1</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>并得到重合点的位置为3，然后分别对3左边的序列和右边的序列进行排序，直至整个序列都是有序的。</p>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="快速排序算法的性能"><a href="#快速排序算法的性能" class="headerlink" title="快速排序算法的性能"></a><strong><font color="#00ffff" size="4">快速排序算法的性能</font></strong></h2><p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.jpg" alt="快速排序算法的性能"></p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a><strong><font color="#00ffff" size="4">空间复杂度</font></strong></h2><p>快速排序在每次分割的过程中，需要 1 个空间存储基准值。而快速排序的大概需要 Nlog2N次 的分割处理，所以占用空间也是 Nlog2N 个。</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><strong><font color="#00ffff" size="4">时间复杂度</font></strong></h2><ul>
<li>快速排序的时间性能取决于快速排序递归的深度；</li>
<li>当数据有序时，以第一个关键字为基准分为两个子序列，前一个子序列为空，此时执行效率最差；</li>
<li>当数据随机分布时，以第一个关键字为基准分为两个子序列，两个子序列的元素个数接近相等，此时执行效率最好；</li>
<li>当数据随机分布时，以第一个关键字为基准分为两个子序列，两个子序列的元素个数接近相等，此时执行效率最好。</li>
</ul>
<h2 id="算法的稳定性"><a href="#算法的稳定性" class="headerlink" title="算法的稳定性"></a><strong><font color="#00ffff" size="4">算法的稳定性</font></strong></h2><p>在快速排序中，相等元素可能会因为分区而交换顺序，所以它是不稳定的算法。</p>
<h1 id="完整参考代码"><a href="#完整参考代码" class="headerlink" title="完整参考代码"></a>完整参考代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.sort;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">division</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">		<span class="comment">// 以最左边的数(left)为基准</span></div><div class="line">		<span class="keyword">int</span> base = list[left];</div><div class="line">		<span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">			<span class="comment">// 从序列右端开始，向左遍历，直到找到小于base的数</span></div><div class="line">			<span class="keyword">while</span> (left &lt; right &amp;&amp; list[right] &gt;= base)</div><div class="line">				right--;</div><div class="line">			<span class="comment">// 找到了比base小的元素，将这个元素放到最左边的位置</span></div><div class="line">			list[left] = list[right];</div><div class="line"></div><div class="line">			<span class="comment">// 从序列左端开始，向右遍历，直到找到大于base的数</span></div><div class="line">			<span class="keyword">while</span> (left &lt; right &amp;&amp; list[left] &lt;= base)</div><div class="line">				left++;</div><div class="line">			<span class="comment">// 找到了比base大的元素，将这个元素放到最右边的位置</span></div><div class="line">			list[right] = list[left];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 最后将base放到left位置。此时，left位置的左侧数值应该都比left小；</span></div><div class="line">		<span class="comment">// 而left位置的右侧数值应该都比left大。</span></div><div class="line">		list[left] = base;</div><div class="line">		<span class="keyword">return</span> left;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 左下标一定小于右下标，否则就越界了</span></div><div class="line">		<span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">			<span class="comment">// 对数组进行分割，取出下次分割的基准标号</span></div><div class="line">			<span class="keyword">int</span> base = division(list, left, right);</div><div class="line"></div><div class="line">			System.out.format(<span class="string">"base = %d:\t"</span>, list[base]);</div><div class="line">			printPart(list, left, right);</div><div class="line"></div><div class="line">			<span class="comment">// 对“基准标号“左侧的一组数值进行递归的切割，以至于将这些数值完整的排序</span></div><div class="line">			quickSort(list, left, base - <span class="number">1</span>);</div><div class="line"></div><div class="line">			<span class="comment">// 对“基准标号“右侧的一组数值进行递归的切割，以至于将这些数值完整的排序</span></div><div class="line">			quickSort(list, base + <span class="number">1</span>, right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 打印序列</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printPart</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; begin; i++) &#123;</div><div class="line">			System.out.print(<span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end; i++) &#123;</div><div class="line">			System.out.print(list[i] + <span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 初始化一个序列</span></div><div class="line">		<span class="keyword">int</span>[] array = &#123; <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span> &#125;;</div><div class="line"></div><div class="line">		<span class="comment">// 调用快速排序方法</span></div><div class="line">		QuickSort quick = <span class="keyword">new</span> QuickSort();</div><div class="line">		System.out.print(<span class="string">"排序前:\t\t"</span>);</div><div class="line">		quick.printPart(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">		quick.quickSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">		System.out.print(<span class="string">"排序后:\t\t"</span>);</div><div class="line">		quick.printPart(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">排序前:		<span class="number">3</span>	<span class="number">4</span>	<span class="number">1</span>	<span class="number">2</span>	<span class="number">5</span></div><div class="line">base = <span class="number">3</span>:	<span class="number">2</span>	<span class="number">1</span>	<span class="number">3</span>	<span class="number">4</span>	<span class="number">5</span></div><div class="line">base = <span class="number">2</span>:	<span class="number">1</span>	<span class="number">2</span></div><div class="line">base = <span class="number">4</span>:				<span class="number">4</span>	<span class="number">5</span></div><div class="line">排序后:		<span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span>	<span class="number">4</span>	<span class="number">5</span></div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《大话数据结构》<br><a href="http://www.cnblogs.com/jingmoxukong/p/4302718.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/4302718.html</a></p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.akathink.com/2016/07/29/内功修养：数据结构总结之排序算法/" target="_blank" rel="external">内功修养：数据结构总结之排序算法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h1&gt;&lt;p&gt;快速排序是一种交换排序。&lt;br&gt;快速排序最早是由图灵获得者Tony Hoare设计出来的，被列为20世纪十大算法之一。&lt;/p&gt;
&lt;h2 id
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂工厂模式</title>
    <link href="http://akathink.com/2016/08/01/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://akathink.com/2016/08/01/彻底搞懂工厂模式/</id>
    <published>2016-08-01T14:57:07.000Z</published>
    <updated>2016-08-08T13:00:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>定义一个用于创建对象的接口，让子类决定实例化哪个类。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>在任何需要生成复杂对象的地方，都可以使用工厂方法模式。</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8FUML%E7%B1%BB%E5%9B%BE.jpg" alt="工厂模式UML类图"></p>
<h1 id="一个非常贴近生活的例子来告诉你什么是工厂模式"><a href="#一个非常贴近生活的例子来告诉你什么是工厂模式" class="headerlink" title="一个非常贴近生活的例子来告诉你什么是工厂模式"></a>一个非常贴近生活的例子来告诉你什么是工厂模式</h1><p>看到上面的定义，我相信有很多人都不明白工厂模式存在的意义到底是什么？工厂模式的存在确实是为了创建实例，但是为什么要通过工厂来创建呢，为什么不直接new一个对象呢？看起来似乎多此一举，可这真的是多此一举吗？下面我们来看两个具体的例子，通过这两个例子慢慢分析并解答我们上面所提的这些问题？</p>
<p>创建一个抽象动物类：Animal<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 动物类</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;<span class="comment">//动物的名字</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;<span class="comment">//动物爱吃什么？</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个具体的动物类：Cat<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 猫类</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">super</span>(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我的名字是："</span> + getName() + <span class="string">"，喵！！"</span>+ <span class="string">"I like to eat fish!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个具体的动物类：Dog<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 狗类</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">super</span>(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我的名字是："</span> + getName() + <span class="string">"，汪汪！！"</span>+ <span class="string">"I like to eat bone！"</span>);  </div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个抽象动物工厂类：AbstractAnimalFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Animal;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象动物工厂：用来生产小动物</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Animal&gt; <span class="function">T <span class="title">createAnimal</span><span class="params">(Class&lt;T&gt; c)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个具体动物工厂类：AnimalFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Animal;</div><div class="line"><span class="comment">/**</span></div><div class="line">/**</div><div class="line"> * 动物工厂：用来生产小动物</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> <span class="keyword">extends</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> &lt;T extends Animal&gt; <span class="function">T <span class="title">createAnimal</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</div><div class="line">		Animal animal = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			animal  = (T)Class.forName(c.getName()).newInstance();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> (T) animal;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个工厂模式场景类：FactoryPattern<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Animal;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Cat;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Dog;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 工厂模式场景类</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPattern</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//创建一个动物工厂</span></div><div class="line">		AbstractAnimalFactory animalFactory = <span class="keyword">new</span> AnimalFactory();</div><div class="line"></div><div class="line">		<span class="comment">//通过动物工厂创建一个Tom猫</span></div><div class="line">		Animal cat = animalFactory.createAnimal(Cat.class);</div><div class="line">		cat.setName(<span class="string">"Tom"</span>);</div><div class="line">		cat.eat();</div><div class="line"></div><div class="line">		<span class="comment">//通过动物工厂创建一个哮天犬</span></div><div class="line">		Animal dog = animalFactory.createAnimal(Dog.class);</div><div class="line">		dog.setName(<span class="string">"哮天犬"</span>);</div><div class="line">		dog.eat();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我的名字是：Tom，喵！！I like to eat fish!</div><div class="line">我的名字是：哮天犬，汪汪！！I like to eat bone！</div></pre></td></tr></table></figure></p>
<p>上面这个例子确实是采用工厂模式来实现的，但是我们依然看不出来，为什么要采用工厂模式来实现，这样实现的好处有哪些？网上各大博客关于工厂模式的例子很多都和此类似，并没能具体说明，更甚者没能说明白工厂模式到底使用在什么地方。其实工厂模式在我们现实生活中非常常见，下面举的这个例子将会告诉大家工厂模式到底用在哪里？</p>
<p>相信大家都去过麦当劳吧，我们去点餐的时候，可以点一份香草奶昔、一份麦辣鸡翅，再加一杯咖啡，也可以点一个吉士汉堡包和一杯可口可乐。具体要点哪些，我们可以随意挑、随意点，挑完之后直接告诉点餐员，然后付款就OK了。这时候我们可能发现这不是传说中的建造者模式吗？与工厂模式有什么关系呢？建造者模式与工厂模式确实没啥太大关系，但是通过这个例子却同时可以引出我们的工厂模式。好了，工厂模式隆重现身。</p>
<p>有的时候我们上班都很累，上完一天的班了就是一阵猛饿，到了麦当劳之后，发现自己并不知到吃啥（不会饿昏了头吧），怎么办呢，没办法，就叫一份今日推荐的麦辣鸡腿汉堡超值套餐吧。这个时候我们并不需要把套餐里面的每类食物都再说一遍，只需要点这一份套餐就可以了。</p>
<p>假设我们现在只提供三种类型点食物：汉堡、饮料、小吃</p>
<p>汉堡（巨无霸、吉士汉堡、双层吉士汉堡）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 汉堡</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBurgers</span> </span>&#123;</div><div class="line">	<span class="function">String <span class="title">makeBurger</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigMac</span> <span class="keyword">implements</span> <span class="title">IBurgers</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeBurger</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"巨无霸"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheeseBurger</span> <span class="keyword">implements</span> <span class="title">IBurgers</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeBurger</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"吉士汉堡包"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheeseBurger</span> <span class="keyword">implements</span> <span class="title">IBurgers</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeBurger</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"双层吉士汉堡"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>饮料（可乐、牛奶、橙汁）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 饮料</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBeverages</span> </span>&#123;</div><div class="line">	<span class="function">String <span class="title">makeDrinking</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coke</span> <span class="keyword">implements</span> <span class="title">IBeverages</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeDrinking</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"可乐"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">implements</span> <span class="title">IBeverages</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeDrinking</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"牛奶"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrangeJuice</span> <span class="keyword">implements</span> <span class="title">IBeverages</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeDrinking</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"橙汁"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>小吃（奶昔、巧克力奶昔、苹果派）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 小吃</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISnacks</span> </span>&#123;</div><div class="line">     <span class="function">String <span class="title">makeSnack</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkSnack</span> <span class="keyword">implements</span> <span class="title">ISnacks</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeSnack</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"奶昔"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChocolateSnack</span> <span class="keyword">implements</span> <span class="title">ISnacks</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeSnack</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"巧克力奶昔"</span> ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplePie</span> <span class="keyword">implements</span> <span class="title">ISnacks</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeSnack</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"苹果派"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>食物准备好了，还需要一个订单类，因为这些食物都是客户自选组合点，所以我们点订单类可以使用建造者模式，更多关于建造者模式，请关注下一篇设计模式文章。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.IBeverages;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.IBurgers;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.ISnacks;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> IBurgers mBurger;</div><div class="line">	<span class="keyword">private</span> IBeverages mBeverages;</div><div class="line">	<span class="keyword">private</span> ISnacks mSnack;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">(OrderBuilder builder)</span> </span>&#123;</div><div class="line">		mBurger = builder.mBurger;</div><div class="line">		mBeverages = builder.mBeverages;</div><div class="line">		mSnack = builder.mSnack;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">if</span> (mBurger != <span class="keyword">null</span>) &#123;</div><div class="line">			sb.append(mBurger.makeBurger()).append(<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (mBeverages != <span class="keyword">null</span>) &#123;</div><div class="line">			sb.append(mBeverages.makeDrinking()).append(<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (mSnack != <span class="keyword">null</span>) &#123;</div><div class="line">			sb.append(mSnack.makeSnack());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderBuilder</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> IBurgers mBurger;</div><div class="line">		<span class="keyword">private</span> IBeverages mBeverages;</div><div class="line">		<span class="keyword">private</span> ISnacks mSnack;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">OrderBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> OrderBuilder <span class="title">addBurger</span><span class="params">(IBurgers burgers)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.mBurger = burgers;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> OrderBuilder <span class="title">addBeverage</span><span class="params">(IBeverages beverages)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.mBeverages = beverages;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> OrderBuilder <span class="title">addSnack</span><span class="params">(ISnacks snacks)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.mSnack = snacks;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Order <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Order(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>订单工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.ApplePie;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.BigMac;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.CheeseBurger;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.ChocolateSnack;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Coke;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.DoubleCheeseBurger;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Milk;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.MilkSnack;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.OrangeJuice;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFactory</span> </span>&#123;</div><div class="line">	<span class="comment">// 创建一份巨无霸套餐(巨无霸+可乐+苹果派)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">createBigMacCombo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Order.OrderBuilder().addBurger(<span class="keyword">new</span> BigMac()).addBeverage(<span class="keyword">new</span> Coke()).addSnack(<span class="keyword">new</span> ApplePie())</div><div class="line">				.build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 创建一份吉士汉堡套餐(吉士汉堡+牛奶+奶昔)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">createCheeseBurgerCombo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Order.OrderBuilder().addBurger(<span class="keyword">new</span> CheeseBurger()).addBeverage(<span class="keyword">new</span> Milk()).addSnack(<span class="keyword">new</span> MilkSnack())</div><div class="line">				.build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 创建一份双层吉士汉堡套餐(双层吉士汉堡+橙汁+巧克力奶昔)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">createDoubleBurgerCombo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Order.OrderBuilder().addBurger(<span class="keyword">new</span> DoubleCheeseBurger()).addBeverage(<span class="keyword">new</span> OrangeJuice())</div><div class="line">				.addSnack(<span class="keyword">new</span> ChocolateSnack()).build();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>场景类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryClient</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 通过订单工厂创建一份巨无霸套餐</span></div><div class="line">		Order bigMacComboOrder = OrderFactory.createBigMacCombo();</div><div class="line">		System.out.println(bigMacComboOrder.makeOrder());</div><div class="line"></div><div class="line">		<span class="comment">// 通过订单工厂创建一份巨无霸套餐</span></div><div class="line">		Order cheeseBurgerComboOrder = OrderFactory.createCheeseBurgerCombo();</div><div class="line">		System.out.println(cheeseBurgerComboOrder.makeOrder());</div><div class="line"></div><div class="line">		<span class="comment">// 通过订单工厂创建一份双层吉士汉堡套餐</span></div><div class="line">		Order DoubleBurgerComboOrder = OrderFactory.createDoubleBurgerCombo();</div><div class="line">		System.out.println(DoubleBurgerComboOrder.makeOrder());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">巨无霸 可乐 苹果派</div><div class="line">吉士汉堡包 牛奶 奶昔</div><div class="line">双层吉士汉堡 橙汁 巧克力奶昔</div></pre></td></tr></table></figure></p>
<p>至此，我们可以发现，如果我们点一份套餐，可以很容易创建一个实例对象，而不用去关心创建这个对象时需要配置哪些东西，或者内部是如何创建的。这样就把一个复杂的对象交给工厂类来负责了，同时通过工厂类，我们也能快速了解我们的工厂能够创建哪些对象，换句话也就是能够提供哪些服务。假如以后我们工厂里面的某个服务更改了，只需要更改工厂模式一处位置就可以了，也就实现了可维护性。</p>
<p>所以，回归到工厂模式的应用场景：在任何需要生成复杂对象的地方，都可以使用工厂方法模式。</p>
<h1 id="工厂模式的优点"><a href="#工厂模式的优点" class="headerlink" title="工厂模式的优点"></a>工厂模式的优点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>良好的封装性，代码结构清晰。创建一个对象是有条件约束的，假如我们需要创建一个具体的对象，只要知道这个产品的类名就可以了，不用知道创建对象的艰辛过程，降低模块间的耦合。</li>
<li>扩展性强。假如我们想要增加一个产品类，只要适当的修改具体的工厂类，或者扩展一个工厂类，就可以完成“拥抱变化”。</li>
<li>屏蔽产品类。产品类的实现如何变化，调用者不需要关心，只需要关心产品的接口就行了。</li>
<li>工厂方法模式是典型的解耦框架。高层模块需要知道产品的抽象类，其他的实现类都不需要关心，符合迪米特原则；也符合依赖倒置原则，只依赖产品的抽象；当然也符合里氏替换原则，使用产品子类替换产品父类是没有任何问题的。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《设计模式之禅》<br>《大话设计模式》<br>《Android源码设计模式》<br><a href="http://blog.csdn.net/renhui999/article/details/8482977" target="_blank" rel="external">http://blog.csdn.net/renhui999/article/details/8482977</a><br><a href="http://blog.csdn.net/nugongahou110/article/details/50425823" target="_blank" rel="external">http://blog.csdn.net/nugongahou110/article/details/50425823</a><br><a href="http://blog.csdn.net/lovelion/article/details/9300731" target="_blank" rel="external">http://blog.csdn.net/lovelion/article/details/9300731</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;定义一个用于创建对象的接口，让子类决定实例化哪个类。&lt;/p&gt;
&lt;h1 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;he
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="设计模式" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="设计模式" scheme="http://akathink.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="http://akathink.com/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序一：冒泡排序</title>
    <link href="http://akathink.com/2016/07/29/%E6%8E%92%E5%BA%8F%E4%B8%80%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://akathink.com/2016/07/29/排序一：冒泡排序/</id>
    <published>2016-07-29T05:33:52.000Z</published>
    <updated>2016-08-05T04:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><p>冒泡排序是一种交换排序。<br>什么是交换排序呢？<br>交换排序：两两比较待排序的关键字，并交换不满足次序要求的那对数，直到整个表都满足次序要求为止。</p>
<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a><strong><font color="#00ffff" size="4">算法思想</font></strong></h2><p>两两比较 <strong><font color="#00ffff" size="4">相邻</font></strong> 记录的关键字，如果反序则交换，直到没有反序的记录为止。<br>假设有n个元素，则最差的情况下则需要n－1趟排序，每趟参与排序的元素个数＝n - 已经排序的趟数。好的情况趟数则在0～n这个范围内。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="冒泡排序示意图"></p>
<p>以上图为例，我们一起看下冒泡排序的实际流程：<br>假设有一个无序序列｛5，4，1，3，2｝<br>第一轮排序：通过两两相临比较，找到最小的数值 1，将其放在序列的第一位；<br>第二轮排序：通过两两相临比较，找到第二小的数值 2，将其放在序列的第二位；<br>第三轮排序：通过两两相邻比较，找到第三小的数值 3，将其放在序列的第三位；<br>……<br>每一轮排序，我们都能找到剩余未排序的最小数值，直至整个序列处于有序状态，排序结束。</p>
<p>若想将上面的流程转换为代码，我们则需要：</p>
<ul>
<li>1 总共需要多少趟排序，则需要一个外部循环控制趟的次数;<br>每趟获得一个最小值，最后一个必然是最大值，因此坐标从0开始，到n-1;</li>
<li>2 每趟需要遍历多少元素，找到本趟中的最小值，则需要一个内部循环;<br>因为每趟排序我们都能找到剩余序列中的最小值，并排放在序列的前面位置，所以呢，我们每趟排序从后往前扫描，扫描到已经排好序的位置即可。因此坐标从n－1开始，直至已经排好序的位置。</li>
</ul>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="冒泡排序算法的性能"><a href="#冒泡排序算法的性能" class="headerlink" title="冒泡排序算法的性能"></a><strong><font color="#00ffff" size="4">冒泡排序算法的性能</font></strong></h2><p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%A7%E8%83%BD.jpg" alt="冒泡排序算法的性能"></p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><strong><font color="#00ffff" size="4">时间复杂度</font></strong></h2><p>若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值：Cmin = N - 1, Mmin = 0。所以，冒泡排序最好时间复杂度为O(N)。<br>若初始文件是反序的，需要进行 N -1 趟排序。每趟排序要进行 N - i 次关键字的比较(1 ≤ i ≤ N - 1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：<br>Cmax = N(N-1)/2 = O(N2)<br>Mmax = 3N(N-1)/2 = O(N2)<br>冒泡排序的最坏时间复杂度为O(N2)。<br>因此，冒泡排序的平均时间复杂度为O(N2)。<br>总结起来，其实就是一句话：当数据越接近正序时，冒泡排序性能越好。</p>
<h2 id="算法稳定性"><a href="#算法稳定性" class="headerlink" title="算法稳定性"></a><strong><font color="#00ffff" size="4">算法稳定性</font></strong></h2><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。<br>所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>对冒泡排序常见的改进方法是加入标志性变量exchange，用于标志某一趟排序过程中是否有数据交换。<br>如果进行某一趟排序时并没有进行数据交换，则说明所有数据已经有序，可立即结束排序，避免不必要的比较过程。</p>
<h1 id="完整参考代码"><a href="#完整参考代码" class="headerlink" title="完整参考代码"></a>完整参考代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.sort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 未优化的冒泡排序算法</div><div class="line">	 * <span class="doctag">@param</span> pDataList 待排序的无序序列</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort1</span><span class="params">(List&lt;Integer&gt; pDataList)</span></span>&#123;</div><div class="line">		<span class="comment">//排序趟数</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,size = pDataList.size() - <span class="number">1</span>;i &lt; size;i++)&#123;</div><div class="line">			<span class="comment">//在剩余序列中获取最小值</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = pDataList.size() - <span class="number">1</span>;j &gt; i;j--)&#123;<span class="comment">//注意j是从后往前循环</span></div><div class="line">				<span class="keyword">if</span>(pDataList.get(j-<span class="number">1</span>) &gt; pDataList.get(j))&#123;</div><div class="line">					<span class="keyword">int</span> temp = pDataList.get(j-<span class="number">1</span>);</div><div class="line">					pDataList.set(j-<span class="number">1</span>, pDataList.get(j));</div><div class="line">					pDataList.set(j, temp);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			System.out.format(<span class="string">"第 %d 趟：\t"</span>, i);</div><div class="line">			printAll(pDataList);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 优化后的冒泡排序算法</div><div class="line">	 * <span class="doctag">@param</span> pDataList 待排序的无序序列</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort2</span><span class="params">(List&lt;Integer&gt; pDataList)</span></span>&#123;</div><div class="line">		<span class="keyword">boolean</span> changeFlag = <span class="keyword">false</span>;</div><div class="line">		<span class="comment">//排序趟数</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,size = pDataList.size() - <span class="number">1</span>;i &lt; size;i++)&#123;</div><div class="line">			changeFlag = <span class="keyword">false</span>;</div><div class="line">			<span class="comment">//在剩余序列中获取最小值</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = pDataList.size() - <span class="number">1</span>;j &gt; i;j--)&#123;<span class="comment">//注意j是从后往前循环</span></div><div class="line">				<span class="keyword">if</span>(pDataList.get(j-<span class="number">1</span>) &gt; pDataList.get(j))&#123;</div><div class="line">					<span class="keyword">int</span> temp = pDataList.get(j-<span class="number">1</span>);</div><div class="line">					pDataList.set(j-<span class="number">1</span>, pDataList.get(j));</div><div class="line">					pDataList.set(j, temp);</div><div class="line">					changeFlag = <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 如果标志为false，说明本轮遍历没有交换，已经是有序数列，可以结束排序</span></div><div class="line">			<span class="keyword">if</span>(!changeFlag)&#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			System.out.format(<span class="string">"第 %d 趟：\t"</span>, i);</div><div class="line">			printAll(pDataList);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">(List&lt;Integer&gt; pDataList)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> value : pDataList)&#123;</div><div class="line">			System.out.print(value + <span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">		 System.out.println();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		List&lt;Integer&gt; dataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		dataList.add(<span class="number">5</span>);</div><div class="line">		dataList.add(<span class="number">4</span>);</div><div class="line">		dataList.add(<span class="number">1</span>);</div><div class="line">		dataList.add(<span class="number">3</span>);</div><div class="line">		dataList.add(<span class="number">2</span>);</div><div class="line">		System.out.print(<span class="string">"排序前:\t"</span>);</div><div class="line">		printAll(dataList);</div><div class="line">		bubbleSort2(dataList);</div><div class="line">		System.out.print(<span class="string">"排序后:\t"</span>);</div><div class="line">		printAll(dataList);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">排序前:	  <span class="number">5</span>	<span class="number">4</span>	<span class="number">1</span>	<span class="number">3</span>	<span class="number">2</span></div><div class="line">第 <span class="number">0</span> 趟：	<span class="number">1</span>	<span class="number">5</span>	<span class="number">4</span>	<span class="number">2</span>	<span class="number">3</span></div><div class="line">第 <span class="number">1</span> 趟：	<span class="number">1</span>	<span class="number">2</span>	<span class="number">5</span>	<span class="number">4</span>	<span class="number">3</span></div><div class="line">第 <span class="number">2</span> 趟：	<span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span>	<span class="number">5</span>	<span class="number">4</span></div><div class="line">第 <span class="number">3</span> 趟：	<span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span>	<span class="number">4</span>	<span class="number">5</span></div><div class="line">排序后:	  <span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span>	<span class="number">4</span>	<span class="number">5</span></div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《大话数据结构》<br><a href="http://www.cnblogs.com/jingmoxukong/p/4302718.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/4302718.html</a></p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.akathink.com/2016/07/29/内功修养：数据结构总结之排序算法/" target="_blank" rel="external">内功修养：数据结构总结之排序算法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h1&gt;&lt;p&gt;冒泡排序是一种交换排序。&lt;br&gt;什么是交换排序呢？&lt;br&gt;交换排序：两两比较待排序的关键字，并交换不满足次序要求的那对数，直到整个表都满足次
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>“内功修养：数据结构总结之排序算法”</title>
    <link href="http://akathink.com/2016/07/29/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93%E4%B9%8B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://akathink.com/2016/07/29/内功修养：数据结构总结之排序算法/</id>
    <published>2016-07-29T05:32:42.000Z</published>
    <updated>2016-08-08T13:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E6%8E%92%E5%BA%8F.png" alt="排序的分类"></p>
<h1 id="稳定排序和不稳定排序"><a href="#稳定排序和不稳定排序" class="headerlink" title="稳定排序和不稳定排序"></a>稳定排序和不稳定排序</h1><p>如果Ri = Rj,Ri排序前在位置前，排序后还是要在Rj位置前，我们称该排序算法属于稳定排序，否则称为不稳定排序。</p>
<h1 id="排序算法目录："><a href="#排序算法目录：" class="headerlink" title="排序算法目录："></a>排序算法目录：</h1><ul>
<li><a href="http://www.akathink.com/2016/07/29/排序一-冒泡排序/" target="_blank" rel="external"><strong><font color="#00ffff" size="4">排序一 冒泡排序</font></strong></a></li>
<li><a href="http://www.akathink.com/2016/08/03/排序二：快速排序/" target="_blank" rel="external"><strong><font color="#00ffff" size="4">排序二 快速排序</font></strong></a></li>
<li>排序三 直接插入排序</li>
<li>排序四 希尔排序</li>
<li>排序五 简单选择排序</li>
<li>排序六 堆排序</li>
<li>排序七 归并排序</li>
<li>排序八 基数排序</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《大话数据结构》</p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html" target="_blank" rel="external">http://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html</a><br><a href="http://www.cnblogs.com/jingmoxukong/p/4329079.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/4329079.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xt310.com1.z0.glb.clouddn.com/%E6%8E%92%E5%BA%8F.png&quot; alt=&quot;排序的分类&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;稳定排序和不稳定排序&quot;&gt;&lt;a href=&quot;#稳定排序和不稳定排序&quot; class=
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂HTTP协议</title>
    <link href="http://akathink.com/2016/07/28/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://akathink.com/2016/07/28/彻底搞懂HTTP协议/</id>
    <published>2016-07-28T08:16:42.000Z</published>
    <updated>2016-08-11T04:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做网络编程（无论传统的Web开发，还是当前比较流行的的移动开发）的时候，我们用到最多的网络传输协议，可能就是HTTP协议了。作为开发者的我们可能更多的也只是去关注哪个第三方类库传输效率更高，哪个库使用最为方便，或者是哪个类库更为易于维护，但是，作为想要长期在该专业道路上行走的我们，仅仅学会使用这些类库的招式显然是不够的，我们还要了解其精髓，去分析源码，看看到底是如何实现的，那么问题来了，如果我们不懂HTTP协议的基础及核心内容，我们又该如何去分析那些源代码呢？无论哪个类库，最终的实现机制都是建立在对HTTP协议熟练掌握的基础上的。那么，让我们一起去彻底征服HTTP协议吧。</p>
<p>在了解之前，我先提几个问题，方便下面分析的时候，能够更好的去理解HTTP协议。</p>
<ul>
<li>1 如何理解HTTP协议的工作机制？</li>
<li>2 如何建立一个网络请求，建立一个网络请求需要初始化哪些东西？</li>
<li>3 如何将HTTP请求发送出去？</li>
<li>4 如何接受到HTTP请求的响应信息?</li>
</ul>
<p>为了更好的理解HTTP协议，我们先简单的了解一下TCP／IP协议族。通常我们所使用的网络都是在TCP／IP协议族的基础上运作的，HTTP也不例外。</p>
<h1 id="一-TCP-IP协议族"><a href="#一-TCP-IP协议族" class="headerlink" title="一. TCP/IP协议族"></a>一. TCP/IP协议族</h1><p>客户端与服务器端进行相互通信，双方必须遵循相同的规则，比如：</p>
<ul>
<li>1 如何探测到通信目标</li>
<li>2 由哪一边先发起通信</li>
<li>3 使用哪种语言进行通信</li>
<li>4 怎样结束通信</li>
<li>5 不同的硬件、操作系统之间如何通信</li>
</ul>
<p>而这一切都需要一种特定的规则来约束，我们称该规则为协议。</p>
<h2 id="1-TCP-IP的分层管理"><a href="#1-TCP-IP的分层管理" class="headerlink" title="1. TCP/IP的分层管理"></a>1. TCP/IP的分层管理</h2><p>TCP/IP协议族最重要的一个特性就是分层。TCP／IP协议族按层次分别分为以下四层：应用层、传输层、网络层和数据链路层（OSI参考模型分为七层）。</p>
<ul>
<li>1 应用层<br>作用：应用层决定了向用户提供应用服务时通信的活动。eg. DNS、FTP、HTTP。</li>
<li>2 传输层<br>作用：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。eg. UDP、TCP。</li>
<li>3 网络层<br>作用：网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方计算机，并把数据包传给对方。</li>
<li>4 链路层<br>作用：用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC及光纤等物理可见部分。</li>
</ul>
<h2 id="2-TCP-IP-通信传输流"><a href="#2-TCP-IP-通信传输流" class="headerlink" title="2. TCP/IP 通信传输流"></a>2. TCP/IP 通信传输流</h2><p><img src="http://7xt310.com1.z0.glb.clouddn.com/TCP:IP%E4%BC%A0%E8%BE%93%E6%B5%81.jpg" alt=""></p>
<h2 id="3-与HTTP关系密切的协议：IP、TCP和DNS"><a href="#3-与HTTP关系密切的协议：IP、TCP和DNS" class="headerlink" title="3. 与HTTP关系密切的协议：IP、TCP和DNS"></a>3. 与HTTP关系密切的协议：IP、TCP和DNS</h2><ul>
<li>1 负责传输的IP协议<blockquote>
<p>按层次分，IP位于网络层；<br>IP协议的作用是把各种数据包传送给对方，而要确保传送到对方那里，则需要满足各类条件，其中两个重要的条件是IP地址和MAC地址；<br>IP间的通信依赖MAC地址，采用ARP协议凭借MAC地址进行通信。</p>
</blockquote>
</li>
<li>2 确保可靠性的TCP协议<blockquote>
<p>按层次分，TCP位于传输层，提供可靠的字节流服务<br>所谓字节流服务是指，为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。<br>一言以蔽之，TCP协议为了更容易传送大数据才把数据分割，而且TCP协议能够确认数据是否送达到对方。</p>
</blockquote>
</li>
<li>3 负责域名解析的DNS服务<blockquote>
<p>DNS同HTTP协议一样位于应用层，提供域名到IP地址之间的解析服务。</p>
</blockquote>
</li>
</ul>
<h2 id="4-各种协议与HTTP协议的关系"><a href="#4-各种协议与HTTP协议的关系" class="headerlink" title="4. 各种协议与HTTP协议的关系"></a>4. 各种协议与HTTP协议的关系</h2><blockquote>
<p>HTTP在发送请求时，如果请求的地址写的是域名，则先访问DNS服务器获取目标服务器的IP地址，然后生成HTTP请求报文，发送给TCP层,按照TCP/IP通信传输流传输给目标服务器。</p>
</blockquote>
<h2 id="5-URI-和-URL"><a href="#5-URI-和-URL" class="headerlink" title="5. URI 和 URL"></a>5. URI 和 URL</h2><h3 id="5-1-URI（统一资源标识符）"><a href="#5-1-URI（统一资源标识符）" class="headerlink" title="5.1 URI（统一资源标识符）"></a>5.1 URI（统一资源标识符）</h3><ul>
<li>Uniform<br>规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。</li>
<li>Resource<br>资源的定义“可标识的人和东西”，资源不仅可以是单一的，也可以是多数的集合体。</li>
<li>Identifier<br>表示可标识的对象。</li>
</ul>
<p>综上：URI就是由某个协议方案表示的资源的定位标识符。</p>
<h3 id="5-2URI-和-URL的关系"><a href="#5-2URI-和-URL的关系" class="headerlink" title="5.2URI 和 URL的关系"></a>5.2URI 和 URL的关系</h3><ul>
<li>URI用字符串标识某一互联网资源，而URL表示资源的地址（互联网上所处的位置），可见是URI的子集。</li>
<li>URL是一种具体的URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。URI是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，所以，是绝对的，而通常说的relative URL，则是针对另一个absolute URL，本质上还是绝对的。</li>
</ul>
<h1 id="二-HTTP协议"><a href="#二-HTTP协议" class="headerlink" title="二. HTTP协议"></a>二. HTTP协议</h1><h2 id="1-HTTP协议"><a href="#1-HTTP协议" class="headerlink" title="1. HTTP协议"></a>1. HTTP协议</h2><ul>
<li>HTTP是什么？<br>HTTP（HyperText Transfer Protocol，超文本传输协议）是WWW (World Wide Web)实现数据通信的基石。<br>它是一种应用层协议（OSI七层模型的最顶层），它基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</li>
<li>HTTP协议用于客户端和服务端之间的通信，通过请求和响应的交互达成通信（肯定是先从客户端开始建立通信的，服务器端在没有接收到任何请求之前不会发送响应）。</li>
<li>HTTP是不保存状态的协议，为了实现期望的保存状态的功能，引入了Cookie技术。</li>
<li>告知服务器意图的HTTP方法<br><strong><font color="#9ACD32" size="4">GET</font></strong>:用来请求访问已被URI识别的资源，指定的资源经服务器解析后返回响应内容；<br><strong><font color="#9ACD32" size="4">POST</font></strong>:传输实体主体；<br><strong><font color="#9ACD32" size="4">PUT</font></strong>:传输文件，鉴于HTTP／1.1的PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的网站不建议使用该方法。若配合Web应用程序的验证机制，或架构设计采用REST标准的同类Web网站，就可能会开放使用PUT方法。<br><strong><font color="#9ACD32" size="4">HEAD</font></strong>:获得报文首部，和GET方法一样，只是不返回报文主体部分，用于确认URI的有效性及资源更新的日期时间等。<br><strong><font color="#9ACD32" size="4">DELETE</font></strong>:删除文件，和PUT方法一样不带验证机制。<br><strong><font color="#9ACD32" size="4">OPTIONS</font></strong>:用来查询针对请求URI指定的资源支持的方法。<br><strong><font color="#9ACD32" size="4">TRACE</font></strong>:追踪路径，客户端通过TRACE方法可以查询发送出去的请求是怎样被加工修改／篡改的。这是因为，想要连接到源目标服务器可能会通过代理中转，TRACE方法就是用来确认连接过程中发生的一系列操作。<br><strong><font color="#9ACD32" size="4">CONNECT</font></strong>: 要求用隧道协议连接代理。CONNECT方法在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL和TLS协议把通信内容经网络隧道传输。</li>
<li>持久连接节省通信量<br>在HTTP协议的初始版本中，每进行一次HTTP通信就要断开一次TCP连接。<br>假设这样的一个应用场景：使用浏览器请求一个包含多张图片的HTML页面时，在发送请求访问HTML页面资源的同时，也会请求该HTML里面包含的其他资源。因此，每次的请求都会造成无谓的TCP连接建立和断开，增加通信量的开销。</li>
</ul>
<p>为了解决上述TCP连接的问题，HTTP想出了持久连接（HTTP keep-alive）的方法。持久连接的特点是：只要任意一端没有明确提出断开连接，则保持TCP连接状态。<br>管线化   持久连接使得多数请求以管线化方式发送成为可能。从前发送请求后需要等待并收到响应后，才能发送下一个请求。管线化技术出现后，不用等待响应亦可直接发送下一个请求，这样就能够同时并行发送多个请求，而不需要一个接一个地等待响应了。</p>
<p><strong><font color="#9ACD32" size="4">HTTP是无状态协议</font></strong>，不对之前发送的请求和响应的状态进行管理。不可否认无状态协议当然也有它自己的优点。由于不保存状态，自然可减少服务器的CPU及内存资源的消耗。保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入了Cookie技术。Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。</p>
<h2 id="2-HTTP报文"><a href="#2-HTTP报文" class="headerlink" title="2. HTTP报文"></a>2. HTTP报文</h2><p>用于HTTP协议交互的信息被称为HTTP报文，客户端请求的报文称之为请求报文，服务端响应的报文称之为响应报文。HTTP报文大致可以分为<font color="#00ffff" size="4">报文首部</font>和<font color="#00ffff" size="4">报文主体</font>两部分。二者由最初出现的空行（CR＋LF）来划分。通常，并不一定要有报文主体。下面来看一下请求报文和响应报文的结构图：<br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E5%9B%BE2.jpg" alt="请求报文结构图"><br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E5%9B%BE1.jpg" alt="响应报文结构图"></p>
<h3 id="编码提升传输速率"><a href="#编码提升传输速率" class="headerlink" title="编码提升传输速率"></a>编码提升传输速率</h3><ul>
<li>gzip(GNU zip)</li>
<li>compress (Unix系统的标准压缩)</li>
<li>deflate(zlib)</li>
<li>identity(不进行编码)</li>
</ul>
<h3 id="分割发送的分块传输编码"><a href="#分割发送的分块传输编码" class="headerlink" title="分割发送的分块传输编码"></a>分割发送的分块传输编码</h3><h3 id="发送多种数据的多部分对象集合"><a href="#发送多种数据的多部分对象集合" class="headerlink" title="发送多种数据的多部分对象集合"></a>发送多种数据的多部分对象集合</h3><h3 id="获取部分内容的范围请求"><a href="#获取部分内容的范围请求" class="headerlink" title="获取部分内容的范围请求"></a>获取部分内容的范围请求</h3><p>在实现<font color="#9ACD32" size="4">断点续传</font>的功能的时候，就需要使用范围请求这个字段了。eg.Range: byte = 5001 - 10000</p>
<h2 id="3-返回结果的HTTP状态码"><a href="#3-返回结果的HTTP状态码" class="headerlink" title="3. 返回结果的HTTP状态码"></a>3. 返回结果的HTTP状态码</h2><ul>
<li>1XX 表示服务器已经接收了客户端请求，客户端可继续发送请求</li>
<li>2XX 请求正常处理完毕</li>
<li>3XX 需要进行附加操作以完成请求</li>
<li>4XX 表示客户端的请求有非法内容</li>
<li>5XX 服务器处理请求出错<br>下图为一些常用的状态码：<br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%B8%B8%E7%94%A8%E7%8A%B6%E6%80%81%E7%A0%81.png" alt="常用的状态码"></li>
</ul>
<h2 id="4-与HTTP协作的Web服务器"><a href="#4-与HTTP协作的Web服务器" class="headerlink" title="4. 与HTTP协作的Web服务器"></a>4. 与HTTP协作的Web服务器</h2><h3 id="用单台虚拟主机实现多个域名"><a href="#用单台虚拟主机实现多个域名" class="headerlink" title="用单台虚拟主机实现多个域名"></a><strong>用单台虚拟主机实现多个域名</strong></h3><p>一台Web服务器可搭建多个独立域名的Web网站，也可作为通信路径上的中转服务器提升传输效率。如果我们在一台服务器上托管了两个域名，当收到请求时就需要弄清楚究竟要访问哪个域名，因此必须在Host首部内完整指定主机名或域名的URI。</p>
<h3 id="通信数据转发程序：代理、网关、隧道"><a href="#通信数据转发程序：代理、网关、隧道" class="headerlink" title="通信数据转发程序：代理、网关、隧道"></a><strong>通信数据转发程序：代理、网关、隧道</strong></h3><p>HTTP通信时，除客户端和服务器以外，还有一些用于通信数据转发的 <strong>应用程序和服务器</strong>，例如代理、网关和隧道，它们可以配合服务器工作。这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接收服务器返回的响应并转发给客户端。</p>
<ul>
<li><p><strong>代理:</strong> 是一种有转发功能的应用程序<br>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。<strong>代理不改变请求URI</strong> ，会直接转发给前方持有资源的目标服务器。<br><font color="#9ACD32" size="4">使用代理服务器的理由：利用缓存技术减少网络带宽的流量。</font><br>代理有多种使用方法，按两种基准分类。一类是 <strong>是否使用缓存</strong> ，另一种是 <strong>是否会修改报文</strong> 。<br>缓存代理：代理转发响应时，缓存代理会预先将资源的副本保存在代理服务器上，下次请求相同的资源时，则将之前缓存的资源作为响应返回。<br>透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理，否则称为非透明代理。</p>
</li>
<li><p><strong>网关:</strong> 是转发其他服务器通信数据的服务器<br>利用网关可以由HTTP请求转化为其他协议通信。<br>网关的工作机制和代理十分相似，而网关能使通信线路上的服务器提供非HTTP协议服务。</p>
</li>
<li><strong>隧道:</strong> 是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。<br>隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。隧道的目的是确保确保能与服务器进行安全通信，隧道本身不会解析HTTP请求，请求保持原样中转给之后的服务器。<h3 id="保存资源的缓存"><a href="#保存资源的缓存" class="headerlink" title="保存资源的缓存"></a><strong>保存资源的缓存</strong></h3>利用缓存可减少对源服务器的访问，可以节省通信流量和通信时间。<br>使用缓存的时候，要注意缓存的有效期限，确保我们发起请求获取的是最新的数据资源。</li>
</ul>
<h2 id="5-HTTP首部"><a href="#5-HTTP首部" class="headerlink" title="5. HTTP首部"></a>5. HTTP首部</h2><p>我们首先来看一下请求报文和响应报文到底长什么模样，下面的示例代码是通过Firefox插件Firebug来抓去的百度页面首部信息：</p>
<ul>
<li>请求报文</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">GET /his?wd=&amp;from=pc_web&amp;rf=3&amp;hisdata=&amp;json=1&amp;p=3&amp;sid=20740_20742_1424_18280_20417_17001_15840_11910_20744_20705&amp;csor=0&amp;cb=jQuery110206488567241711853_1469936513370&amp;_=1469936513371 HTTP/1.1</div><div class="line"></div><div class="line">Host: www.baidu.com</div><div class="line"></div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</div><div class="line"></div><div class="line">Accept: text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */／*; q=0.01</div><div class="line"></div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line"></div><div class="line">Accept-Encoding: gzip, deflate, br</div><div class="line"></div><div class="line">X-Requested-With: XMLHttpRequest</div><div class="line"></div><div class="line">Referer: https://www.baidu.com/</div><div class="line"></div><div class="line">Cookie: BAIDUID=DB24D5F4AB36694CF00C4877ADA56562:FG=1; BIDUPSID=DB24D5F4AB36694CF00C4877ADA56562; PSTM=1469936050; BDRCVFR[gltLrB7qNCt]=mk3SLVN4HKm; BD_CK_SAM=1; H_PS_PSSID=20740_20742_1424_18280_20417_17001_15840_11910_20744_20705; BD_UPN=133252; H_PS_645EC=96a0XJobAseSCdbn9%2FviULLD7KreCHN4V4HzQtcGacKF8tGu13Nzd6j9PoB2SPPVj1d5; BD_HOME=0; __bsi=11860814506529643127_00_0_I_R_25_0303_C02F_N_I_I_0</div><div class="line"></div><div class="line">Connection: keep-alive</div></pre></td></tr></table></figure>
<ul>
<li>响应报文</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</div><div class="line"></div><div class="line">Server: bfe/<span class="number">1.0</span><span class="number">.8</span><span class="number">.14</span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>: Sun, <span class="number">31</span> Jul <span class="number">2016</span> <span class="number">03</span>:<span class="number">41</span>:<span class="number">53</span> GMT</div><div class="line"></div><div class="line">Content-Type: baiduApp/json; v6<span class="number">.27</span><span class="number">.2</span><span class="number">.14</span>; charset=UTF<span class="number">-8</span></div><div class="line"></div><div class="line">Content-Length: <span class="number">95</span></div><div class="line"></div><div class="line">Connection: keep-alive</div><div class="line"></div><div class="line">Cache-Control: private</div><div class="line"></div><div class="line">Expires: Sun, <span class="number">31</span> Jul <span class="number">2016</span> <span class="number">04</span>:<span class="number">41</span>:<span class="number">53</span> GMT</div><div class="line"></div><div class="line"><span class="built_in">Set</span>-Cookie: __bsi=<span class="number">12018325985460509248</span>_00_0_I_R_4_0303_C02F_N_I_I_0; expires=Sun, <span class="number">31</span>-Jul<span class="number">-16</span> <span class="number">03</span>:<span class="number">41</span>:<span class="number">58</span> GMT; domain=www.baidu.com; path=<span class="regexp">/</span></div></pre></td></tr></table></figure>
<p>结合上面的HTTP报文结构图我们可以知道，两段代码的第一行分别对应请求行和响应行，下面则为首部字段。<br>通过首部字段的名字我们也可以知道，首部字段起着传递额外信息的重要作用，下面我们来简单了解一下HTTP首部字段：<br><img src="http://7xt310.com1.z0.glb.clouddn.com/HTTP%EF%BC%8F1.1%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5.png" alt="HTTP首部字段"></p>
<h2 id="6-确保Web安全的HTTPS"><a href="#6-确保Web安全的HTTPS" class="headerlink" title="6. 确保Web安全的HTTPS"></a>6. 确保Web安全的HTTPS</h2><p>通过上面的分析，我们了解到HTTP具有相当优秀和方便的一面，然而，HTTP并非只有好的一面，事物皆具两面性，主要存在以下几点不足：</p>
<ul>
<li>通信使用明文（不加密），内容可能会被窃听</li>
<li>不验证通信方的身份，因此有可能遭遇伪装</li>
<li>无法证明报文的完整性，所以有可能已遭篡改               </li>
</ul>
<p><strong><font color="#9ACD32" size="4">HTTP＋加密＋认证＋完整性保护＝HTTPS</font></strong><br>HTTPS并非是应用层的一种新协议。只是HTTP通信接口部分用SSL和TSL协议代替而已，通常，HTTP直接和TCP通信，当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信了。简言之，所谓HTTPS其实就是身披SSL协议这层外壳的HTTP。<br>当采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能。而且SSL协议是独立于HTTP的协议，所以不光是HTTP协议，其他运行在应用层的SMTP和Telnet等协议均可配合SSL协议使用。可以说SSL是当今世界上应用最为广泛的网络安全技术。</p>
<p>在讲解SSL之前我们需要首先了解一下加密方法，加密分为<font color="#9ACD32" size="4">对称加密</font>和<font color="#9ACD32" size="4">非对称加密</font>。HTTPS协议则是采用的两者混合的实现方式，为什么要结合两种的实现方式呢？这是因为它们都各自存在自己的优缺点。对于对称加密来说，密钥的传输交换是不安全的，但是效率比较高，而对于非对称加密，是不用担心传输的密钥安全性的问题的，因为我们传递的是公开密钥，任何人都可以获得，但是缺点是效率比较低。对于公钥私钥、数字签名，这个哥们已经总结的相当好了，可以参考一下这篇<a href="http://www.cnblogs.com/f1194361820/archive/2015/01/29/4260025.html" target="_blank" rel="external"><font color="#9ACD32" size="4">文章</font></a>。</p>
<h2 id="7-确认访问用户身份的认证"><a href="#7-确认访问用户身份的认证" class="headerlink" title="7. 确认访问用户身份的认证"></a>7. 确认访问用户身份的认证</h2><p><font color="#00ffff" size="4">何为认证？简单来说就是证明你是你自己！</font>核对的信息通常有密码、动态令牌、数字证书、生物认证、IC卡等信息。<br>HTTP／1.1使用的认证方式如下：</p>
<ul>
<li>BASIC认证（基本认证）</li>
<li>DIGEST认证（摘要认证）</li>
<li>SSL客户端认证</li>
<li>FormBase认证（基于表单认证）</li>
</ul>
<h2 id="8-基于HTTP的功能追加协议"><a href="#8-基于HTTP的功能追加协议" class="headerlink" title="8. 基于HTTP的功能追加协议"></a>8. 基于HTTP的功能追加协议</h2><p>待续…<br>下面将会整体做个总结，完整的说明HTTP的工作机制。</p>
<h1 id="三-后记"><a href="#三-后记" class="headerlink" title="三. 后记"></a>三. 后记</h1><p>本文是在阅读《图解HTTP》一书的基础上并同时参考一些优秀文章之后进行总结的，不仅整体认识了HTTP，也方便下次复习的时候，能够用更短的时间去理解这些虽然基础但是却很重要的知识。</p>
<h1 id="四：参考资料"><a href="#四：参考资料" class="headerlink" title="四：参考资料"></a>四：参考资料</h1><p><a href="http://www.cnblogs.com/jingmoxukong/p/5115055.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/5115055.html</a><br><a href="http://www.cnblogs.com/gaojing/archive/2012/02/04/2413626.html" target="_blank" rel="external">http://www.cnblogs.com/gaojing/archive/2012/02/04/2413626.html</a><br><a href="http://network.chinabyte.com/401/13238901.shtml" target="_blank" rel="external">http://network.chinabyte.com/401/13238901.shtml</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做网络编程（无论传统的Web开发，还是当前比较流行的的移动开发）的时候，我们用到最多的网络传输协议，可能就是HTTP协议了。作为开发者的我们可能更多的也只是去关注哪个第三方类库传输效率更高，哪个库使用最为方便，或者是哪个类库更为易于维护，但是，作为想要长期在该专业道路上行
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="HTTP协议" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="网络" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/HTTP%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="HTTP协议" scheme="http://akathink.com/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="网络协议" scheme="http://akathink.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
