<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>akathink&#39;s blog</title>
  <subtitle>AkaThink</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://akathink.com/"/>
  <updated>2016-08-08T14:01:02.000Z</updated>
  <id>http://akathink.com/</id>
  
  <author>
    <name>LiuQingJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>彻底搞懂红黑树</title>
    <link href="http://akathink.com/2016/08/08/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://akathink.com/2016/08/08/彻底搞懂红黑树/</id>
    <published>2016-08-08T11:29:18.000Z</published>
    <updated>2016-08-08T14:01:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>二叉树（Binary Tree）是n(n &gt;= 0)个节点的有限集合。该集合或者未空集（称为空二叉树），或者由一个根节点和两棵互不相交的，分别称为根节点的左子树和右子树的二叉树组成。</p>
<h3 id="二叉树特点"><a href="#二叉树特点" class="headerlink" title="二叉树特点"></a>二叉树特点</h3><ul>
<li>每个节点 <strong><font color="#00ffff" size="4">最多</font></strong> 有两棵子树。所以二叉树中不存在大于2的节点。</li>
<li>左子树和右子树是有顺序的，次序不能任一颠倒。就像人的双手和双脚，显然左手和右手，左脚和右脚都是不能颠倒顺序呼唤的，否则那也太别扭了。</li>
<li>即使树中某节点只有一棵子树，也要区分它是左子树还是右子树。</li>
</ul>
<h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><ul>
<li>斜树：顾名思义，斜树一定是斜的，所有的节点都只有左子树的二叉树叫左斜树，所有节点都是只有右子树的二叉树叫右斜树，两者统称为斜树。</li>
<li>满二叉树：在一棵二叉树中，如果所有分支节点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</li>
<li>完全二叉树：对一棵具有n个节点的二叉树按层序编号，如果编号为i(1&lt;=i&lt;=n)的节点与同样深度的满二叉树编号为i的节点在二叉树中位置完全相同，则称该二叉树为完全二叉树。满二叉树一定是完全二叉树，但完全二叉树不一定是满的。</li>
<li>赫夫曼树：是一种带权路径长度最短的树。</li>
<li><p>平衡二叉树：是一种 <strong><font color="#00ffff" size="4">二叉排序树（或者叫二叉查找树）</font></strong>，其中每个节点的左子树和右子树的高度差至多等于1.<br>那么什么是二叉排序树呢？二叉排序树（Binary Sort Tree），又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">若它的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</div><div class="line">若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</div><div class="line">它的左右子树也分别为二叉排序树。</div></pre></td></tr></table></figure>
</li>
<li><p>红黑树：具体定义和性质请往下看。</p>
</li>
</ul>
<h1 id="什么是红黑树？"><a href="#什么是红黑树？" class="headerlink" title="什么是红黑树？"></a>什么是红黑树？</h1><h2 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h2><p>红黑树，一种自平衡的 <strong><font color="#00ffff" size="4">二叉查找树</font></strong>，但在每个节点上有一个额外的存储位表示节点的颜色，可以是Red或者Black。这些颜色位用来确保红黑树在插入和删除操作后仍能近乎平衡。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="红黑树示意图"></p>
<h2 id="红黑树的五个性质："><a href="#红黑树的五个性质：" class="headerlink" title="红黑树的五个性质："></a>红黑树的五个性质：</h2><ul>
<li>性质一：节点要么是红色要么是黑色。</li>
<li>性质二：根节点是黑色。</li>
<li>性质三：所有叶子节点都是黑色（叶子是NIL节点，被称为黑哨兵）。</li>
<li>性质四：每个红色节点的两个子节点都是黑色（从每个叶子到根的所有路径上不能有两个连续的红色节点）。</li>
<li>性质五：从任一节点到每个叶子节点的所有路径都包含相同数目的黑色节点。</li>
</ul>
<h2 id="红黑树的应用场景"><a href="#红黑树的应用场景" class="headerlink" title="红黑树的应用场景"></a>红黑树的应用场景</h2><p>到此，我们可能已经对红黑树有了一点初步的认识了，但是我们却不知道为什么要有红黑树，红黑树是为了解决什么问题被提出来的呢？<br>我们知道，二叉查找树在大多数情况下查找和插入在效率上是没有问题的，但是在最坏的情况下效率比较低，但是平衡二叉树能够保证在最坏的情况下也能达到lgN，要实现这一目标，我们就要保证在插入完成后始终保持平衡状态。在一棵具有N个节点的树中，我们希望该树的高度能够维持在lgN左右，这样我们就能保证只需要lgN次比较操作就可以查找到想要的值。不幸的是，每次插入元素之后维持树的平衡状态太昂贵。所以就出现一些新的数据结构来保证在最坏的情况下插入和查找效率都能保证在对数的时间复杂度内完成。而我们所讲的红黑树就属于此新的数据结构之一，除此之外还有B树等数据结构。</p>
<p>待续……</p>
<p><strong><font color="#00ffff" size="4">后天补齐：2016-08-10</font></strong></p>
<h1 id="完整参考代码"><a href="#完整参考代码" class="headerlink" title="完整参考代码"></a>完整参考代码</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《大话数据结构》<br><a href="http://blog.csdn.net/eric491179912/article/details/6179908" target="_blank" rel="external">http://blog.csdn.net/eric491179912/article/details/6179908</a><br><a href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html" target="_blank" rel="external">http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html</a><br><a href="http://www.cnblogs.com/daoluanxiaozi/p/3340382.html" target="_blank" rel="external">http://www.cnblogs.com/daoluanxiaozi/p/3340382.html</a><br><a href="http://blog.csdn.net/loongshawn/article/details/50414608" target="_blank" rel="external">http://blog.csdn.net/loongshawn/article/details/50414608</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h1&gt;&lt;h2 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="红黑树" scheme="http://akathink.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
      <category term="树" scheme="http://akathink.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂Android安全架构:基础篇</title>
    <link href="http://akathink.com/2016/08/05/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Android%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84:%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://akathink.com/2016/08/05/彻底搞懂Android安全架构:基础篇/</id>
    <published>2016-08-05T02:21:52.000Z</published>
    <updated>2016-08-08T12:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安全要解决什么问题？"><a href="#安全要解决什么问题？" class="headerlink" title="安全要解决什么问题？"></a>安全要解决什么问题？</h1><ul>
<li>保密（Security、Confidentiality）：只想让部分有权限的人知晓，其他人是看不到的；</li>
<li>鉴别、认证（Authentication）：确保通信的对方就是自己信得过的人；</li>
<li>完整性（Integrity）：能够验证信息在传输过程中是否发生了篡改，或者数据丢失等现象</li>
<li>不可否认性（Non-repudiation）：谁发的信息，能够表明发送者等身份。</li>
</ul>
<p>一些常用术语：</p>
<ul>
<li>密钥：分为加密密钥和解密密钥。</li>
<li>明文：没有进行加密，能够直接代表原文含义的信息。</li>
<li>密文：经过加密处理之后，隐藏原文含义的信息。</li>
<li>加密：将原文转换成密文的实施过程。</li>
<li>解密：将密文转换成明文的实施过程。</li>
</ul>
<h1 id="密码术"><a href="#密码术" class="headerlink" title="密码术"></a>密码术</h1><p>说到密码术似乎感觉很高大上，这不都是各种谍战片里面经常出现的吗？其实，在我们现实生活中，多多少少也会接触一些简单的密码术，例如：字母加密、藏头诗、倒写文等。我们可以采用任何规则来定义密码术，但是通常我们并不会自己去写新的密码术，为什么呢？</p>
<p>这主要是因为：</p>
<ol>
<li>安全性：没有经过验证的密码术，确保不了该密码术一定安全。</li>
<li>密码术里面是否有后门，因为自己定义的密码术不公开，不知道里面是否包含一些其他后门的类似程序。</li>
</ol>
<p>概括来讲，加密主要分为：<strong><font color="#00ffff" size="4">置换加密</font></strong> 、<strong><font color="#00ffff" size="4">转置加密</font></strong>、<strong><font color="#00ffff" size="4">乘积加密</font></strong>（多次置换加密和转置加密的混合使用）。</p>
<h1 id="加密模型"><a href="#加密模型" class="headerlink" title="加密模型"></a>加密模型</h1><p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%9E%8B.png" alt="加密模型"></p>
<h2 id="对称加密模型"><a href="#对称加密模型" class="headerlink" title="对称加密模型"></a>对称加密模型</h2><ul>
<li><p>DES</p>
</li>
<li><p>AES</p>
</li>
<li><p>应用场景</p>
</li>
<li><p>存在的问题：密钥如何交换？</p>
</li>
</ul>
<h2 id="非对称加密模型"><a href="#非对称加密模型" class="headerlink" title="非对称加密模型"></a>非对称加密模型</h2><p>下面首先通过一个例子来简单说明公钥私钥、数字签名、消息摘要是什么，然后再详细分析非对称加密模型里面的重要知识点:</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%AF%86%E9%92%A5%E7%94%B1%E8%B0%81%E4%BA%A7%E7%94%9F.jpg" alt="产生公钥和私钥"><br>鲍勃采用某种产生密钥的算法，生成两把密钥：一把是公钥，一把是私钥。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%B0%86%E5%85%AC%E9%92%A5%E5%85%AC%E5%BC%80.jpg" alt="将公钥公开"><br>鲍勃将自己的公钥发送给他的朋友－－帕蒂、道格、苏珊－－每人一把，以后谁想给鲍勃写私密邮件，则可以使用该公钥进行加密。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86.jpg" alt="采用公钥加密"><br>现在苏珊想给鲍勃写一封保密邮件，他写完之后用鲍勃的公钥加密，就可以达到保密的效果。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E9%87%87%E7%94%A8%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86.jpg" alt="采用私钥解密"><br>鲍勃收到信之后，用自己的私钥解密，看到了信件的内容。这里要强调的是，只要鲍勃的私钥不泄漏，这封信就是安全的，即使落在别人的手里，也无法解密。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%EF%BC%8C%E7%94%9F%E6%88%90%E6%91%98%E8%A6%81.jpg" alt="使用数字签名，生成摘要"><br>鲍勃给苏珊回信，决定采用“数字签名”。他写完之后先用Hash函数，生成信件的摘要（Digest）。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%AF%B9%E6%91%98%E8%A6%81%E5%8A%A0%E5%AF%86%EF%BC%8C%E7%94%9F%E6%88%90%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.jpg" alt="对摘要进行加密，生成数字签名"><br>然后，鲍勃再使用私钥对这个摘要加密，生成“数字签名”。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%B0%86%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E9%99%84%E5%9C%A8%E4%BF%A1%E4%BB%B6%E7%9A%84%E4%B8%8B%E9%9D%A2.jpg" alt="将数字签名附在信件的下面"><br>鲍勃将这个签名附在邮件下方，一起发给苏珊。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E9%87%87%E7%94%A8%E5%85%AC%E9%92%A5%E8%A7%A3%E5%AF%86.jpg" alt="采用公钥解密"><br>苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E6%AF%94%E5%AF%B9%E6%91%98%E8%A6%81%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C.jpg" alt="比对摘要是否相同"><br>苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行比对。如果两者一致，就证明这封信未被修改过。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%81%87%E7%9A%84%E5%85%AC%E9%92%A5.jpg" alt="假的公钥"><br>复杂的情况出现了，道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.jpg" alt="使用数字证书"><br>后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%AD%BE%E5%90%8D%E7%9A%84%E5%90%8C%E6%97%B6%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.jpg" alt="签名的同时，再加上数字证书"><br>鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E7%94%A8CA%E7%9A%84%E5%85%AC%E9%92%A5%E8%A7%A3%E5%BC%80%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.jpg" alt="用CA的公钥揭开数字证书将"><br>苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。</p>
<ul>
<li>公钥和私钥</li>
</ul>
<p>通过上面的例子，我们可以很轻松的知道，公钥和私钥都是由鲍勃产生的，私钥由自己保管，公钥交可以交给任何人。</p>
<p>应用场景：</p>
<ul>
<li>公钥算法的理论基石<br>数学是科学之基<br>基础学科研究之物，虚虚实实，先虚后实<br>公钥算法的最重要的两大数学基础<br>  建立在分解大数的困难度<br>  建立在以大素数为模来计算离散对数的困难度</li>
<li>RSA算法<br>  RSA的名字由来？就是三个科学家的名字首字母的组合<br>  建立在分解大数的困难度<br>  公钥私钥的长度至少1024bit</li>
</ul>
<p>两大加密模型的优缺点：</p>
<pre><code>优点：相对于非对称加密非常高效。
缺点：密钥交换问题
     不如RSA的加密安全程度高，但是当选择256bit的AES时，仍然能胜任绝大多数的安全领域
</code></pre><p>非对称加密的优缺点：</p>
<pre><code>优点：安全性足够高
     没有密钥交换的问题
缺点：效率低，对于大数据加密很慢
</code></pre><h1 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h1><h2 id="实际的保密会话场景："><a href="#实际的保密会话场景：" class="headerlink" title="实际的保密会话场景："></a>实际的保密会话场景：</h2><ul>
<li>基于高效的 <strong><font color="#00ffff" size="4">对称加密</font></strong> 算法对会话进行加密</li>
<li>会话密钥实时产生且周期性变化</li>
<li>基于其他足够安全的方式进行会话密钥的传输和交换</li>
</ul>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%AE%9E%E9%99%85%E7%9A%84%E4%BC%9A%E8%AF%9D%E5%9C%BA%E6%99%AF.jpg" alt="实际的保密会话应用场景"></p>
<h2 id="利用公钥密钥来交换会话密钥"><a href="#利用公钥密钥来交换会话密钥" class="headerlink" title="利用公钥密钥来交换会话密钥"></a>利用公钥密钥来交换会话密钥</h2><ul>
<li>实时随机的会话密钥产生</li>
<li>使用对端的的公钥对产生的会话密钥加密并传递给对端</li>
<li>对段使用私钥解密获取会话密钥</li>
<li>双方开始基于共享的会话密钥进行对称加密的保密会话通信<br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%88%A9%E7%94%A8%E5%85%AC%E9%92%A5%E6%9D%A5%E4%BA%A4%E6%8D%A2%E4%BC%9A%E8%AF%9D%E5%AF%86%E9%92%A5.jpg" alt="利用公钥密钥来交换会话密钥"></li>
</ul>
<h2 id="其他的密钥交换方式"><a href="#其他的密钥交换方式" class="headerlink" title="其他的密钥交换方式"></a>其他的密钥交换方式</h2><p>Diffie-Hellman密钥交换协议</p>
<ul>
<li>基于以大素数为模计算离散对数的困难度</li>
<li>双方各自选定Key，然后以一定算法变换（使得Key不以明文传输）后传输给对方</li>
<li>双方利用对方交换过来的数据和自己选定的key做变换，获得一个一致的结果，作为会话密钥<br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%85%B6%E4%BB%96%E7%9A%84%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2.jpg" alt="其他的密钥交换方式"></li>
</ul>
<h1 id="消息摘要"><a href="#消息摘要" class="headerlink" title="消息摘要"></a>消息摘要</h1><ul>
<li>Hash与散列函数的定义与特点<br>定义：变长的输入变成定长的输出。<br>特点：</li>
</ul>
<p>易变性：即便原始信息发生1bit的变化，Hash的输出将会有不可预知的巨大变化。<br>不可逆性：通过Hash的结果构造出满足的输入信息是不可能的，或者极其困难的。</p>
<p>常见的Hash算法：MD5（128位）、SHA1（160位）</p>
<ul>
<li>消息摘要和数字指纹</li>
</ul>
<p>人的指纹的特点：<br>    双胞胎的指纹不同<br>    通过指纹猜不出它的主人<br>与Hash的对应关系：<br>    易变性<br>    不可逆<br>数字指纹由此而来，通过对消息采用某种Hash算法得到的输出就是消息摘要，也叫数字指纹。</p>
<ul>
<li>Hash的应用场景</li>
</ul>
<ol>
<li>防篡改<br> 基于易变特性<br> 保证完整性<br> 示例：<br> 网络下载某个文件时，都会指定该文件的一个MD5值，确保文件没有被替换<br> 消息传送时尾部额外传MD</li>
<li><p>防损坏<br> 基于易变特性<br> 保证完整性<br> 示例：<br> CRC校验的作用和不足<br> MD校验消息恶劣环境传输的完整性和未受损坏<br> 应用程序中对于核心文件／数据库读写的鲁棒性保护，防止掉电和Crash</p>
</li>
<li><p>认证<br> 基于不可逆特性<br> 可认证对端<br> 示例：<br> HTTP的Basic和Digest认证<br> PPP的PAP和CHAP认证<br> 手机登陆密码和隐藏MMI的设计</p>
</li>
</ol>
<ul>
<li><p>HMAC<br>  我们遇到了什么问题？<br>  直接尾部附带消息摘要的问题（篡改内容的同时篡改摘要）<br>  直接对密码做Hash传输的认证的问题（重放攻击）</p>
<p>  HMAC怎么解决的？<br>  HMAC就是使用Key对原始信息变换后再进行Hash</p>
</li>
</ul>
<h1 id="电子签名"><a href="#电子签名" class="headerlink" title="电子签名"></a>电子签名</h1><h2 id="签名要解决什么问题？"><a href="#签名要解决什么问题？" class="headerlink" title="签名要解决什么问题？"></a>签名要解决什么问题？</h2><ul>
<li>签什么？<br>签的内容的完整性保护</li>
<li>谁在签<br>签名人的不可否认性<h2 id="公钥密码术的两面性"><a href="#公钥密码术的两面性" class="headerlink" title="公钥密码术的两面性"></a>公钥密码术的两面性</h2></li>
</ul>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E6%9C%AF%E7%9A%84%E4%B8%A4%E9%9D%A2%E6%80%A7.png" alt="公钥密码术的两面性"></p>
<p>通过上面的图例说明我们知道对于公钥密码术，我们不仅可以使用公钥加密，反过来也可以通过公钥来实现电子签名。</p>
<h1 id="证书与PKI"><a href="#证书与PKI" class="headerlink" title="证书与PKI"></a>证书与PKI</h1><ul>
<li>证书的作用</li>
</ul>
<ol>
<li><p>证书的存储和交换<br>公钥作为一个字段存储于数字证书中<br>证书的交换和传输即可传输／交换公钥</p>
</li>
<li><p>现代信任基石</p>
</li>
</ol>
<p>证书只是存储和交换公钥的吗？那我不可以吧公钥直接作为一个文件来存储和交换吗？<br>另外，我不可以篡改证书吗？我作为第三者，篡改苏珊发给鲍勃的证书，把里面的公钥改成我自己的，由此来HACK别人发给鲍勃的信息。<br>利用签名来保护数字证书本身。</p>
<ul>
<li>证书链和PKI</li>
</ul>
<p>根证书自签名，非根证书父签名<br>证书的限制：约束、拥堵、有效期</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.youdzone.com/signature.html" target="_blank" rel="external">http://www.youdzone.com/signature.html</a><br><a href="http://www.jikexueyuan.com/course/32_7.html?ss=1" target="_blank" rel="external">http://www.jikexueyuan.com/course/32_7.html?ss=1</a><br><a href="http://www.cnblogs.com/f1194361820/archive/2015/01/29/4260025.html" target="_blank" rel="external">http://www.cnblogs.com/f1194361820/archive/2015/01/29/4260025.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安全要解决什么问题？&quot;&gt;&lt;a href=&quot;#安全要解决什么问题？&quot; class=&quot;headerlink&quot; title=&quot;安全要解决什么问题？&quot;&gt;&lt;/a&gt;安全要解决什么问题？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;保密（Security、Confidentiality）：只想让
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="Android" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Android/"/>
    
      <category term="安全" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/Android/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="Android" scheme="http://akathink.com/tags/Android/"/>
    
      <category term="安全" scheme="http://akathink.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>排序二：快速排序</title>
    <link href="http://akathink.com/2016/08/03/%E6%8E%92%E5%BA%8F%E4%BA%8C%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://akathink.com/2016/08/03/排序二：快速排序/</id>
    <published>2016-08-03T02:26:25.000Z</published>
    <updated>2016-08-08T13:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><p>快速排序是一种交换排序。<br>快速排序最早是由图灵获得者Tony Hoare设计出来的，被列为20世纪十大算法之一。</p>
<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a><strong><font color="#00ffff" size="4">算法思想</font></strong></h2><p>通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序的目的。</p>
<p>从上面的文字描述理解起来可能很费力，下面直接通过图解的方式来说明：</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="快速排序示例图"><br>通过上面的图解分析我们知道第一轮排序结束，得到的序列为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>，<span class="number">1</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>并得到重合点的位置为3，然后分别对3左边的序列和右边的序列进行排序，直至整个序列都是有序的。</p>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="快速排序算法的性能"><a href="#快速排序算法的性能" class="headerlink" title="快速排序算法的性能"></a><strong><font color="#00ffff" size="4">快速排序算法的性能</font></strong></h2><p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.jpg" alt="快速排序算法的性能"></p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a><strong><font color="#00ffff" size="4">空间复杂度</font></strong></h2><p>快速排序在每次分割的过程中，需要 1 个空间存储基准值。而快速排序的大概需要 Nlog2N次 的分割处理，所以占用空间也是 Nlog2N 个。</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><strong><font color="#00ffff" size="4">时间复杂度</font></strong></h2><ul>
<li>快速排序的时间性能取决于快速排序递归的深度；</li>
<li>当数据有序时，以第一个关键字为基准分为两个子序列，前一个子序列为空，此时执行效率最差；</li>
<li>当数据随机分布时，以第一个关键字为基准分为两个子序列，两个子序列的元素个数接近相等，此时执行效率最好；</li>
<li>当数据随机分布时，以第一个关键字为基准分为两个子序列，两个子序列的元素个数接近相等，此时执行效率最好。</li>
</ul>
<h2 id="算法的稳定性"><a href="#算法的稳定性" class="headerlink" title="算法的稳定性"></a><strong><font color="#00ffff" size="4">算法的稳定性</font></strong></h2><p>在快速排序中，相等元素可能会因为分区而交换顺序，所以它是不稳定的算法。</p>
<h1 id="完整参考代码"><a href="#完整参考代码" class="headerlink" title="完整参考代码"></a>完整参考代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.sort;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">division</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">		<span class="comment">// 以最左边的数(left)为基准</span></div><div class="line">		<span class="keyword">int</span> base = list[left];</div><div class="line">		<span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">			<span class="comment">// 从序列右端开始，向左遍历，直到找到小于base的数</span></div><div class="line">			<span class="keyword">while</span> (left &lt; right &amp;&amp; list[right] &gt;= base)</div><div class="line">				right--;</div><div class="line">			<span class="comment">// 找到了比base小的元素，将这个元素放到最左边的位置</span></div><div class="line">			list[left] = list[right];</div><div class="line"></div><div class="line">			<span class="comment">// 从序列左端开始，向右遍历，直到找到大于base的数</span></div><div class="line">			<span class="keyword">while</span> (left &lt; right &amp;&amp; list[left] &lt;= base)</div><div class="line">				left++;</div><div class="line">			<span class="comment">// 找到了比base大的元素，将这个元素放到最右边的位置</span></div><div class="line">			list[right] = list[left];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 最后将base放到left位置。此时，left位置的左侧数值应该都比left小；</span></div><div class="line">		<span class="comment">// 而left位置的右侧数值应该都比left大。</span></div><div class="line">		list[left] = base;</div><div class="line">		<span class="keyword">return</span> left;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 左下标一定小于右下标，否则就越界了</span></div><div class="line">		<span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">			<span class="comment">// 对数组进行分割，取出下次分割的基准标号</span></div><div class="line">			<span class="keyword">int</span> base = division(list, left, right);</div><div class="line"></div><div class="line">			System.out.format(<span class="string">"base = %d:\t"</span>, list[base]);</div><div class="line">			printPart(list, left, right);</div><div class="line"></div><div class="line">			<span class="comment">// 对“基准标号“左侧的一组数值进行递归的切割，以至于将这些数值完整的排序</span></div><div class="line">			quickSort(list, left, base - <span class="number">1</span>);</div><div class="line"></div><div class="line">			<span class="comment">// 对“基准标号“右侧的一组数值进行递归的切割，以至于将这些数值完整的排序</span></div><div class="line">			quickSort(list, base + <span class="number">1</span>, right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 打印序列</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printPart</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; begin; i++) &#123;</div><div class="line">			System.out.print(<span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end; i++) &#123;</div><div class="line">			System.out.print(list[i] + <span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 初始化一个序列</span></div><div class="line">		<span class="keyword">int</span>[] array = &#123; <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span> &#125;;</div><div class="line"></div><div class="line">		<span class="comment">// 调用快速排序方法</span></div><div class="line">		QuickSort quick = <span class="keyword">new</span> QuickSort();</div><div class="line">		System.out.print(<span class="string">"排序前:\t\t"</span>);</div><div class="line">		quick.printPart(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">		quick.quickSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">		System.out.print(<span class="string">"排序后:\t\t"</span>);</div><div class="line">		quick.printPart(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">排序前:		<span class="number">3</span>	<span class="number">4</span>	<span class="number">1</span>	<span class="number">2</span>	<span class="number">5</span></div><div class="line">base = <span class="number">3</span>:	<span class="number">2</span>	<span class="number">1</span>	<span class="number">3</span>	<span class="number">4</span>	<span class="number">5</span></div><div class="line">base = <span class="number">2</span>:	<span class="number">1</span>	<span class="number">2</span></div><div class="line">base = <span class="number">4</span>:				<span class="number">4</span>	<span class="number">5</span></div><div class="line">排序后:		<span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span>	<span class="number">4</span>	<span class="number">5</span></div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《大话数据结构》<br><a href="http://www.cnblogs.com/jingmoxukong/p/4302718.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/4302718.html</a></p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.akathink.com/2016/07/29/内功修养：数据结构总结之排序算法/" target="_blank" rel="external">内功修养：数据结构总结之排序算法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h1&gt;&lt;p&gt;快速排序是一种交换排序。&lt;br&gt;快速排序最早是由图灵获得者Tony Hoare设计出来的，被列为20世纪十大算法之一。&lt;/p&gt;
&lt;h2 id
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂工厂模式</title>
    <link href="http://akathink.com/2016/08/01/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://akathink.com/2016/08/01/彻底搞懂工厂模式/</id>
    <published>2016-08-01T14:57:07.000Z</published>
    <updated>2016-08-08T13:00:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>定义一个用于创建对象的接口，让子类决定实例化哪个类。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>在任何需要生成复杂对象的地方，都可以使用工厂方法模式。</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8FUML%E7%B1%BB%E5%9B%BE.jpg" alt="工厂模式UML类图"></p>
<h1 id="一个非常贴近生活的例子来告诉你什么是工厂模式"><a href="#一个非常贴近生活的例子来告诉你什么是工厂模式" class="headerlink" title="一个非常贴近生活的例子来告诉你什么是工厂模式"></a>一个非常贴近生活的例子来告诉你什么是工厂模式</h1><p>看到上面的定义，我相信有很多人都不明白工厂模式存在的意义到底是什么？工厂模式的存在确实是为了创建实例，但是为什么要通过工厂来创建呢，为什么不直接new一个对象呢？看起来似乎多此一举，可这真的是多此一举吗？下面我们来看两个具体的例子，通过这两个例子慢慢分析并解答我们上面所提的这些问题？</p>
<p>创建一个抽象动物类：Animal<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 动物类</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;<span class="comment">//动物的名字</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;<span class="comment">//动物爱吃什么？</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个具体的动物类：Cat<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 猫类</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">super</span>(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我的名字是："</span> + getName() + <span class="string">"，喵！！"</span>+ <span class="string">"I like to eat fish!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个具体的动物类：Dog<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 狗类</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">super</span>(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我的名字是："</span> + getName() + <span class="string">"，汪汪！！"</span>+ <span class="string">"I like to eat bone！"</span>);  </div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个抽象动物工厂类：AbstractAnimalFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Animal;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象动物工厂：用来生产小动物</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Animal&gt; <span class="function">T <span class="title">createAnimal</span><span class="params">(Class&lt;T&gt; c)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个具体动物工厂类：AnimalFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Animal;</div><div class="line"><span class="comment">/**</span></div><div class="line">/**</div><div class="line"> * 动物工厂：用来生产小动物</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> <span class="keyword">extends</span> <span class="title">AbstractAnimalFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> &lt;T extends Animal&gt; <span class="function">T <span class="title">createAnimal</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</div><div class="line">		Animal animal = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			animal  = (T)Class.forName(c.getName()).newInstance();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> (T) animal;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个工厂模式场景类：FactoryPattern<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Animal;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Cat;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Dog;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 工厂模式场景类</div><div class="line"> * <span class="doctag">@author</span> LiuQingJie</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPattern</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//创建一个动物工厂</span></div><div class="line">		AbstractAnimalFactory animalFactory = <span class="keyword">new</span> AnimalFactory();</div><div class="line"></div><div class="line">		<span class="comment">//通过动物工厂创建一个Tom猫</span></div><div class="line">		Animal cat = animalFactory.createAnimal(Cat.class);</div><div class="line">		cat.setName(<span class="string">"Tom"</span>);</div><div class="line">		cat.eat();</div><div class="line"></div><div class="line">		<span class="comment">//通过动物工厂创建一个哮天犬</span></div><div class="line">		Animal dog = animalFactory.createAnimal(Dog.class);</div><div class="line">		dog.setName(<span class="string">"哮天犬"</span>);</div><div class="line">		dog.eat();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我的名字是：Tom，喵！！I like to eat fish!</div><div class="line">我的名字是：哮天犬，汪汪！！I like to eat bone！</div></pre></td></tr></table></figure></p>
<p>上面这个例子确实是采用工厂模式来实现的，但是我们依然看不出来，为什么要采用工厂模式来实现，这样实现的好处有哪些？网上各大博客关于工厂模式的例子很多都和此类似，并没能具体说明，更甚者没能说明白工厂模式到底使用在什么地方。其实工厂模式在我们现实生活中非常常见，下面举的这个例子将会告诉大家工厂模式到底用在哪里？</p>
<p>相信大家都去过麦当劳吧，我们去点餐的时候，可以点一份香草奶昔、一份麦辣鸡翅，再加一杯咖啡，也可以点一个吉士汉堡包和一杯可口可乐。具体要点哪些，我们可以随意挑、随意点，挑完之后直接告诉点餐员，然后付款就OK了。这时候我们可能发现这不是传说中的建造者模式吗？与工厂模式有什么关系呢？建造者模式与工厂模式确实没啥太大关系，但是通过这个例子却同时可以引出我们的工厂模式。好了，工厂模式隆重现身。</p>
<p>有的时候我们上班都很累，上完一天的班了就是一阵猛饿，到了麦当劳之后，发现自己并不知到吃啥（不会饿昏了头吧），怎么办呢，没办法，就叫一份今日推荐的麦辣鸡腿汉堡超值套餐吧。这个时候我们并不需要把套餐里面的每类食物都再说一遍，只需要点这一份套餐就可以了。</p>
<p>假设我们现在只提供三种类型点食物：汉堡、饮料、小吃</p>
<p>汉堡（巨无霸、吉士汉堡、双层吉士汉堡）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 汉堡</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBurgers</span> </span>&#123;</div><div class="line">	<span class="function">String <span class="title">makeBurger</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigMac</span> <span class="keyword">implements</span> <span class="title">IBurgers</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeBurger</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"巨无霸"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheeseBurger</span> <span class="keyword">implements</span> <span class="title">IBurgers</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeBurger</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"吉士汉堡包"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheeseBurger</span> <span class="keyword">implements</span> <span class="title">IBurgers</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeBurger</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"双层吉士汉堡"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>饮料（可乐、牛奶、橙汁）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 饮料</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBeverages</span> </span>&#123;</div><div class="line">	<span class="function">String <span class="title">makeDrinking</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coke</span> <span class="keyword">implements</span> <span class="title">IBeverages</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeDrinking</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"可乐"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">implements</span> <span class="title">IBeverages</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeDrinking</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"牛奶"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrangeJuice</span> <span class="keyword">implements</span> <span class="title">IBeverages</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeDrinking</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"橙汁"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>小吃（奶昔、巧克力奶昔、苹果派）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 小吃</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISnacks</span> </span>&#123;</div><div class="line">     <span class="function">String <span class="title">makeSnack</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkSnack</span> <span class="keyword">implements</span> <span class="title">ISnacks</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeSnack</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"奶昔"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChocolateSnack</span> <span class="keyword">implements</span> <span class="title">ISnacks</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeSnack</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"巧克力奶昔"</span> ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplePie</span> <span class="keyword">implements</span> <span class="title">ISnacks</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeSnack</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"苹果派"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>食物准备好了，还需要一个订单类，因为这些食物都是客户自选组合点，所以我们点订单类可以使用建造者模式，更多关于建造者模式，请关注下一篇设计模式文章。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.IBeverages;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.IBurgers;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.ISnacks;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> IBurgers mBurger;</div><div class="line">	<span class="keyword">private</span> IBeverages mBeverages;</div><div class="line">	<span class="keyword">private</span> ISnacks mSnack;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">(OrderBuilder builder)</span> </span>&#123;</div><div class="line">		mBurger = builder.mBurger;</div><div class="line">		mBeverages = builder.mBeverages;</div><div class="line">		mSnack = builder.mSnack;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">makeOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">if</span> (mBurger != <span class="keyword">null</span>) &#123;</div><div class="line">			sb.append(mBurger.makeBurger()).append(<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (mBeverages != <span class="keyword">null</span>) &#123;</div><div class="line">			sb.append(mBeverages.makeDrinking()).append(<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (mSnack != <span class="keyword">null</span>) &#123;</div><div class="line">			sb.append(mSnack.makeSnack());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderBuilder</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> IBurgers mBurger;</div><div class="line">		<span class="keyword">private</span> IBeverages mBeverages;</div><div class="line">		<span class="keyword">private</span> ISnacks mSnack;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">OrderBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> OrderBuilder <span class="title">addBurger</span><span class="params">(IBurgers burgers)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.mBurger = burgers;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> OrderBuilder <span class="title">addBeverage</span><span class="params">(IBeverages beverages)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.mBeverages = beverages;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> OrderBuilder <span class="title">addSnack</span><span class="params">(ISnacks snacks)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.mSnack = snacks;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Order <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Order(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>订单工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.ApplePie;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.BigMac;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.CheeseBurger;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.ChocolateSnack;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Coke;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.DoubleCheeseBurger;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.Milk;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.MilkSnack;</div><div class="line"><span class="keyword">import</span> com.akathink.designpattern.entity.OrangeJuice;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFactory</span> </span>&#123;</div><div class="line">	<span class="comment">// 创建一份巨无霸套餐(巨无霸+可乐+苹果派)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">createBigMacCombo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Order.OrderBuilder().addBurger(<span class="keyword">new</span> BigMac()).addBeverage(<span class="keyword">new</span> Coke()).addSnack(<span class="keyword">new</span> ApplePie())</div><div class="line">				.build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 创建一份吉士汉堡套餐(吉士汉堡+牛奶+奶昔)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">createCheeseBurgerCombo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Order.OrderBuilder().addBurger(<span class="keyword">new</span> CheeseBurger()).addBeverage(<span class="keyword">new</span> Milk()).addSnack(<span class="keyword">new</span> MilkSnack())</div><div class="line">				.build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 创建一份双层吉士汉堡套餐(双层吉士汉堡+橙汁+巧克力奶昔)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">createDoubleBurgerCombo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Order.OrderBuilder().addBurger(<span class="keyword">new</span> DoubleCheeseBurger()).addBeverage(<span class="keyword">new</span> OrangeJuice())</div><div class="line">				.addSnack(<span class="keyword">new</span> ChocolateSnack()).build();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>场景类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.designpattern;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryClient</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 通过订单工厂创建一份巨无霸套餐</span></div><div class="line">		Order bigMacComboOrder = OrderFactory.createBigMacCombo();</div><div class="line">		System.out.println(bigMacComboOrder.makeOrder());</div><div class="line"></div><div class="line">		<span class="comment">// 通过订单工厂创建一份巨无霸套餐</span></div><div class="line">		Order cheeseBurgerComboOrder = OrderFactory.createCheeseBurgerCombo();</div><div class="line">		System.out.println(cheeseBurgerComboOrder.makeOrder());</div><div class="line"></div><div class="line">		<span class="comment">// 通过订单工厂创建一份双层吉士汉堡套餐</span></div><div class="line">		Order DoubleBurgerComboOrder = OrderFactory.createDoubleBurgerCombo();</div><div class="line">		System.out.println(DoubleBurgerComboOrder.makeOrder());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">巨无霸 可乐 苹果派</div><div class="line">吉士汉堡包 牛奶 奶昔</div><div class="line">双层吉士汉堡 橙汁 巧克力奶昔</div></pre></td></tr></table></figure></p>
<p>至此，我们可以发现，如果我们点一份套餐，可以很容易创建一个实例对象，而不用去关心创建这个对象时需要配置哪些东西，或者内部是如何创建的。这样就把一个复杂的对象交给工厂类来负责了，同时通过工厂类，我们也能快速了解我们的工厂能够创建哪些对象，换句话也就是能够提供哪些服务。假如以后我们工厂里面的某个服务更改了，只需要更改工厂模式一处位置就可以了，也就实现了可维护性。</p>
<p>所以，回归到工厂模式的应用场景：在任何需要生成复杂对象的地方，都可以使用工厂方法模式。</p>
<h1 id="工厂模式的优点"><a href="#工厂模式的优点" class="headerlink" title="工厂模式的优点"></a>工厂模式的优点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>良好的封装性，代码结构清晰。创建一个对象是有条件约束的，假如我们需要创建一个具体的对象，只要知道这个产品的类名就可以了，不用知道创建对象的艰辛过程，降低模块间的耦合。</li>
<li>扩展性强。假如我们想要增加一个产品类，只要适当的修改具体的工厂类，或者扩展一个工厂类，就可以完成“拥抱变化”。</li>
<li>屏蔽产品类。产品类的实现如何变化，调用者不需要关心，只需要关心产品的接口就行了。</li>
<li>工厂方法模式是典型的解耦框架。高层模块需要知道产品的抽象类，其他的实现类都不需要关心，符合迪米特原则；也符合依赖倒置原则，只依赖产品的抽象；当然也符合里氏替换原则，使用产品子类替换产品父类是没有任何问题的。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《设计模式之禅》<br>《大话设计模式》<br>《Android源码设计模式》<br><a href="http://blog.csdn.net/renhui999/article/details/8482977" target="_blank" rel="external">http://blog.csdn.net/renhui999/article/details/8482977</a><br><a href="http://blog.csdn.net/nugongahou110/article/details/50425823" target="_blank" rel="external">http://blog.csdn.net/nugongahou110/article/details/50425823</a><br><a href="http://blog.csdn.net/lovelion/article/details/9300731" target="_blank" rel="external">http://blog.csdn.net/lovelion/article/details/9300731</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;定义一个用于创建对象的接口，让子类决定实例化哪个类。&lt;/p&gt;
&lt;h1 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;he
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="设计模式" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="设计模式" scheme="http://akathink.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="http://akathink.com/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序一：冒泡排序</title>
    <link href="http://akathink.com/2016/07/29/%E6%8E%92%E5%BA%8F%E4%B8%80%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://akathink.com/2016/07/29/排序一：冒泡排序/</id>
    <published>2016-07-29T05:33:52.000Z</published>
    <updated>2016-08-05T04:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><p>冒泡排序是一种交换排序。<br>什么是交换排序呢？<br>交换排序：两两比较待排序的关键字，并交换不满足次序要求的那对数，直到整个表都满足次序要求为止。</p>
<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a><strong><font color="#00ffff" size="4">算法思想</font></strong></h2><p>两两比较 <strong><font color="#00ffff" size="4">相邻</font></strong> 记录的关键字，如果反序则交换，直到没有反序的记录为止。<br>假设有n个元素，则最差的情况下则需要n－1趟排序，每趟参与排序的元素个数＝n - 已经排序的趟数。好的情况趟数则在0～n这个范围内。</p>
<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="冒泡排序示意图"></p>
<p>以上图为例，我们一起看下冒泡排序的实际流程：<br>假设有一个无序序列｛5，4，1，3，2｝<br>第一轮排序：通过两两相临比较，找到最小的数值 1，将其放在序列的第一位；<br>第二轮排序：通过两两相临比较，找到第二小的数值 2，将其放在序列的第二位；<br>第三轮排序：通过两两相邻比较，找到第三小的数值 3，将其放在序列的第三位；<br>……<br>每一轮排序，我们都能找到剩余未排序的最小数值，直至整个序列处于有序状态，排序结束。</p>
<p>若想将上面的流程转换为代码，我们则需要：</p>
<ul>
<li>1 总共需要多少趟排序，则需要一个外部循环控制趟的次数;<br>每趟获得一个最小值，最后一个必然是最大值，因此坐标从0开始，到n-1;</li>
<li>2 每趟需要遍历多少元素，找到本趟中的最小值，则需要一个内部循环;<br>因为每趟排序我们都能找到剩余序列中的最小值，并排放在序列的前面位置，所以呢，我们每趟排序从后往前扫描，扫描到已经排好序的位置即可。因此坐标从n－1开始，直至已经排好序的位置。</li>
</ul>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="冒泡排序算法的性能"><a href="#冒泡排序算法的性能" class="headerlink" title="冒泡排序算法的性能"></a><strong><font color="#00ffff" size="4">冒泡排序算法的性能</font></strong></h2><p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%A7%E8%83%BD.jpg" alt="冒泡排序算法的性能"></p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><strong><font color="#00ffff" size="4">时间复杂度</font></strong></h2><p>若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值：Cmin = N - 1, Mmin = 0。所以，冒泡排序最好时间复杂度为O(N)。<br>若初始文件是反序的，需要进行 N -1 趟排序。每趟排序要进行 N - i 次关键字的比较(1 ≤ i ≤ N - 1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：<br>Cmax = N(N-1)/2 = O(N2)<br>Mmax = 3N(N-1)/2 = O(N2)<br>冒泡排序的最坏时间复杂度为O(N2)。<br>因此，冒泡排序的平均时间复杂度为O(N2)。<br>总结起来，其实就是一句话：当数据越接近正序时，冒泡排序性能越好。</p>
<h2 id="算法稳定性"><a href="#算法稳定性" class="headerlink" title="算法稳定性"></a><strong><font color="#00ffff" size="4">算法稳定性</font></strong></h2><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。<br>所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>对冒泡排序常见的改进方法是加入标志性变量exchange，用于标志某一趟排序过程中是否有数据交换。<br>如果进行某一趟排序时并没有进行数据交换，则说明所有数据已经有序，可立即结束排序，避免不必要的比较过程。</p>
<h1 id="完整参考代码"><a href="#完整参考代码" class="headerlink" title="完整参考代码"></a>完整参考代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.akathink.sort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 未优化的冒泡排序算法</div><div class="line">	 * <span class="doctag">@param</span> pDataList 待排序的无序序列</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort1</span><span class="params">(List&lt;Integer&gt; pDataList)</span></span>&#123;</div><div class="line">		<span class="comment">//排序趟数</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,size = pDataList.size() - <span class="number">1</span>;i &lt; size;i++)&#123;</div><div class="line">			<span class="comment">//在剩余序列中获取最小值</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = pDataList.size() - <span class="number">1</span>;j &gt; i;j--)&#123;<span class="comment">//注意j是从后往前循环</span></div><div class="line">				<span class="keyword">if</span>(pDataList.get(j-<span class="number">1</span>) &gt; pDataList.get(j))&#123;</div><div class="line">					<span class="keyword">int</span> temp = pDataList.get(j-<span class="number">1</span>);</div><div class="line">					pDataList.set(j-<span class="number">1</span>, pDataList.get(j));</div><div class="line">					pDataList.set(j, temp);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			System.out.format(<span class="string">"第 %d 趟：\t"</span>, i);</div><div class="line">			printAll(pDataList);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 优化后的冒泡排序算法</div><div class="line">	 * <span class="doctag">@param</span> pDataList 待排序的无序序列</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort2</span><span class="params">(List&lt;Integer&gt; pDataList)</span></span>&#123;</div><div class="line">		<span class="keyword">boolean</span> changeFlag = <span class="keyword">false</span>;</div><div class="line">		<span class="comment">//排序趟数</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,size = pDataList.size() - <span class="number">1</span>;i &lt; size;i++)&#123;</div><div class="line">			changeFlag = <span class="keyword">false</span>;</div><div class="line">			<span class="comment">//在剩余序列中获取最小值</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = pDataList.size() - <span class="number">1</span>;j &gt; i;j--)&#123;<span class="comment">//注意j是从后往前循环</span></div><div class="line">				<span class="keyword">if</span>(pDataList.get(j-<span class="number">1</span>) &gt; pDataList.get(j))&#123;</div><div class="line">					<span class="keyword">int</span> temp = pDataList.get(j-<span class="number">1</span>);</div><div class="line">					pDataList.set(j-<span class="number">1</span>, pDataList.get(j));</div><div class="line">					pDataList.set(j, temp);</div><div class="line">					changeFlag = <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 如果标志为false，说明本轮遍历没有交换，已经是有序数列，可以结束排序</span></div><div class="line">			<span class="keyword">if</span>(!changeFlag)&#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			System.out.format(<span class="string">"第 %d 趟：\t"</span>, i);</div><div class="line">			printAll(pDataList);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">(List&lt;Integer&gt; pDataList)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> value : pDataList)&#123;</div><div class="line">			System.out.print(value + <span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line">		 System.out.println();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		List&lt;Integer&gt; dataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		dataList.add(<span class="number">5</span>);</div><div class="line">		dataList.add(<span class="number">4</span>);</div><div class="line">		dataList.add(<span class="number">1</span>);</div><div class="line">		dataList.add(<span class="number">3</span>);</div><div class="line">		dataList.add(<span class="number">2</span>);</div><div class="line">		System.out.print(<span class="string">"排序前:\t"</span>);</div><div class="line">		printAll(dataList);</div><div class="line">		bubbleSort2(dataList);</div><div class="line">		System.out.print(<span class="string">"排序后:\t"</span>);</div><div class="line">		printAll(dataList);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">排序前:	  <span class="number">5</span>	<span class="number">4</span>	<span class="number">1</span>	<span class="number">3</span>	<span class="number">2</span></div><div class="line">第 <span class="number">0</span> 趟：	<span class="number">1</span>	<span class="number">5</span>	<span class="number">4</span>	<span class="number">2</span>	<span class="number">3</span></div><div class="line">第 <span class="number">1</span> 趟：	<span class="number">1</span>	<span class="number">2</span>	<span class="number">5</span>	<span class="number">4</span>	<span class="number">3</span></div><div class="line">第 <span class="number">2</span> 趟：	<span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span>	<span class="number">5</span>	<span class="number">4</span></div><div class="line">第 <span class="number">3</span> 趟：	<span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span>	<span class="number">4</span>	<span class="number">5</span></div><div class="line">排序后:	  <span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span>	<span class="number">4</span>	<span class="number">5</span></div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《大话数据结构》<br><a href="http://www.cnblogs.com/jingmoxukong/p/4302718.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/4302718.html</a></p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.akathink.com/2016/07/29/内功修养：数据结构总结之排序算法/" target="_blank" rel="external">内功修养：数据结构总结之排序算法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h1&gt;&lt;p&gt;冒泡排序是一种交换排序。&lt;br&gt;什么是交换排序呢？&lt;br&gt;交换排序：两两比较待排序的关键字，并交换不满足次序要求的那对数，直到整个表都满足次
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>“内功修养：数据结构总结之排序算法”</title>
    <link href="http://akathink.com/2016/07/29/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93%E4%B9%8B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://akathink.com/2016/07/29/内功修养：数据结构总结之排序算法/</id>
    <published>2016-07-29T05:32:42.000Z</published>
    <updated>2016-08-08T13:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xt310.com1.z0.glb.clouddn.com/%E6%8E%92%E5%BA%8F.png" alt="排序的分类"></p>
<h1 id="稳定排序和不稳定排序"><a href="#稳定排序和不稳定排序" class="headerlink" title="稳定排序和不稳定排序"></a>稳定排序和不稳定排序</h1><p>如果Ri = Rj,Ri排序前在位置前，排序后还是要在Rj位置前，我们称该排序算法属于稳定排序，否则称为不稳定排序。</p>
<h1 id="排序算法目录："><a href="#排序算法目录：" class="headerlink" title="排序算法目录："></a>排序算法目录：</h1><ul>
<li><a href="http://www.akathink.com/2016/07/29/排序一-冒泡排序/" target="_blank" rel="external"><strong><font color="#00ffff" size="4">排序一 冒泡排序</font></strong></a></li>
<li><a href="http://www.akathink.com/2016/08/03/排序二：快速排序/" target="_blank" rel="external"><strong><font color="#00ffff" size="4">排序二 快速排序</font></strong></a></li>
<li>排序三 直接插入排序</li>
<li>排序四 希尔排序</li>
<li>排序五 简单选择排序</li>
<li>排序六 堆排序</li>
<li>排序七 归并排序</li>
<li>排序八 基数排序</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《大话数据结构》</p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html" target="_blank" rel="external">http://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html</a><br><a href="http://www.cnblogs.com/jingmoxukong/p/4329079.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/4329079.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xt310.com1.z0.glb.clouddn.com/%E6%8E%92%E5%BA%8F.png&quot; alt=&quot;排序的分类&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;稳定排序和不稳定排序&quot;&gt;&lt;a href=&quot;#稳定排序和不稳定排序&quot; class=
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="数据结构" scheme="http://akathink.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="http://akathink.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂HTTP协议</title>
    <link href="http://akathink.com/2016/07/28/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://akathink.com/2016/07/28/彻底搞懂HTTP协议/</id>
    <published>2016-07-28T08:16:42.000Z</published>
    <updated>2016-08-08T12:59:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做网络编程（无论传统的Web开发，还是当前比较流行的的移动开发）的时候，我们用到最多的网络传输协议，可能就是HTTP协议了。作为开发者的我们可能更多的也只是去关注哪个第三方类库传输效率更高，哪个库使用最为方便，或者是哪个类库更为易于维护，但是，作为想要长期在该专业道路上行走的我们，仅仅学会使用这些类库的招式显然是不够的，我们还要了解其精髓，去分析源码，看看到底是如何实现的，那么问题来了，如果我们不懂HTTP协议的基础及核心内容，我们又该如何去分析那些源代码呢？无论哪个类库，最终的实现机制都是建立在对HTTP协议熟练掌握的基础上的。那么，让我们一起去彻底征服HTTP协议吧。</p>
<p>在了解之前，我先提几个问题，方便下面分析的时候，能够更好的去理解HTTP协议。</p>
<ul>
<li>1 如何理解HTTP协议的工作机制？</li>
<li>2 如何建立一个网络请求，建立一个网络请求需要初始化哪些东西？</li>
<li>3 如何将HTTP请求发送出去？</li>
<li>4 如何接受到HTTP请求的响应信息?</li>
</ul>
<p>为了更好的理解HTTP协议，我们先简单的了解一下TCP／IP协议族。通常我们所使用的网络都是在TCP／IP协议族的基础上运作的，HTTP也不例外。</p>
<h1 id="一-TCP-IP协议族"><a href="#一-TCP-IP协议族" class="headerlink" title="一. TCP/IP协议族"></a>一. TCP/IP协议族</h1><p>客户端与服务器端进行相互通信，双方必须遵循相同的规则，比如：</p>
<ul>
<li>1 如何探测到通信目标</li>
<li>2 由哪一边先发起通信</li>
<li>3 使用哪种语言进行通信</li>
<li>4 怎样结束通信</li>
<li>5 不同的硬件、操作系统之间如何通信</li>
</ul>
<p>而这一切都需要一种特定的规则来约束，我们称该规则为协议。</p>
<h2 id="1-TCP-IP的分层管理"><a href="#1-TCP-IP的分层管理" class="headerlink" title="1. TCP/IP的分层管理"></a>1. TCP/IP的分层管理</h2><p>TCP/IP协议族最重要的一个特性就是分层。TCP／IP协议族按层次分别分为以下四层：应用层、传输层、网络层和数据链路层（OSI参考模型分为七层）。</p>
<ul>
<li>1 应用层<br>作用：应用层决定了向用户提供应用服务时通信的活动。eg. DNS、FTP、HTTP。</li>
<li>2 传输层<br>作用：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。eg. UDP、TCP。</li>
<li>3 网络层<br>作用：网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方计算机，并把数据包传给对方。</li>
<li>4 链路层<br>作用：用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC及光纤等物理可见部分。</li>
</ul>
<h2 id="2-TCP-IP-通信传输流"><a href="#2-TCP-IP-通信传输流" class="headerlink" title="2. TCP/IP 通信传输流"></a>2. TCP/IP 通信传输流</h2><p><img src="http://7xt310.com1.z0.glb.clouddn.com/TCP:IP%E4%BC%A0%E8%BE%93%E6%B5%81.jpg" alt=""></p>
<h2 id="3-与HTTP关系密切的协议：IP、TCP和DNS"><a href="#3-与HTTP关系密切的协议：IP、TCP和DNS" class="headerlink" title="3. 与HTTP关系密切的协议：IP、TCP和DNS"></a>3. 与HTTP关系密切的协议：IP、TCP和DNS</h2><ul>
<li>1 负责传输的IP协议<blockquote>
<p>按层次分，IP位于网络层；<br>IP协议的作用是把各种数据包传送给对方，而要确保传送到对方那里，则需要满足各类条件，其中两个重要的条件是IP地址和MAC地址；<br>IP间的通信依赖MAC地址，采用ARP协议凭借MAC地址进行通信。</p>
</blockquote>
</li>
<li>2 确保可靠性的TCP协议<blockquote>
<p>按层次分，TCP位于传输层，提供可靠的字节流服务<br>所谓字节流服务是指，为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。<br>一言以蔽之，TCP协议为了更容易传送大数据才把数据分割，而且TCP协议能够确认数据是否送达到对方。</p>
</blockquote>
</li>
<li>3 负责域名解析的DNS服务<blockquote>
<p>DNS同HTTP协议一样位于应用层，提供域名到IP地址之间的解析服务。</p>
</blockquote>
</li>
</ul>
<h2 id="4-各种协议与HTTP协议的关系"><a href="#4-各种协议与HTTP协议的关系" class="headerlink" title="4. 各种协议与HTTP协议的关系"></a>4. 各种协议与HTTP协议的关系</h2><blockquote>
<p>HTTP在发送请求时，如果请求的地址写的是域名，则先访问DNS服务器获取目标服务器的IP地址，然后生成HTTP请求报文，发送给TCP层,按照TCP/IP通信传输流传输给目标服务器。</p>
</blockquote>
<h2 id="5-URI-和-URL"><a href="#5-URI-和-URL" class="headerlink" title="5. URI 和 URL"></a>5. URI 和 URL</h2><h3 id="5-1-URI（统一资源标识符）"><a href="#5-1-URI（统一资源标识符）" class="headerlink" title="5.1 URI（统一资源标识符）"></a>5.1 URI（统一资源标识符）</h3><ul>
<li>Uniform<br>规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。</li>
<li>Resource<br>资源的定义“可标识的人和东西”，资源不仅可以是单一的，也可以是多数的集合体。</li>
<li>Identifier<br>表示可标识的对象。</li>
</ul>
<p>综上：URI就是由某个协议方案表示的资源的定位标识符。</p>
<h3 id="5-2URI-和-URL的关系"><a href="#5-2URI-和-URL的关系" class="headerlink" title="5.2URI 和 URL的关系"></a>5.2URI 和 URL的关系</h3><ul>
<li>URI用字符串标识某一互联网资源，而URL表示资源的地址（互联网上所处的位置），可见是URI的子集。</li>
<li>URL是一种具体的URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。URI是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，所以，是绝对的，而通常说的relative URL，则是针对另一个absolute URL，本质上还是绝对的。</li>
</ul>
<h1 id="二-HTTP协议"><a href="#二-HTTP协议" class="headerlink" title="二. HTTP协议"></a>二. HTTP协议</h1><h2 id="1-HTTP协议"><a href="#1-HTTP协议" class="headerlink" title="1. HTTP协议"></a>1. HTTP协议</h2><ul>
<li>HTTP是什么？<br>HTTP（HyperText Transfer Protocol，超文本传输协议）是WWW (World Wide Web)实现数据通信的基石。<br>它是一种应用层协议（OSI七层模型的最顶层），它基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</li>
<li>HTTP协议用于客户端和服务端之间的通信，通过请求和响应的交互达成通信（肯定是先从客户端开始建立通信的，服务器端在没有接收到任何请求之前不会发送响应）。</li>
<li>HTTP是不保存状态的协议，为了实现期望的保存状态的功能，引入了Cookie技术。</li>
<li>告知服务器意图的HTTP方法<br><strong><font color="#9ACD32" size="4">GET</font></strong>:用来请求访问已被URI识别的资源，指定的资源经服务器解析后返回响应内容；<br><strong><font color="#9ACD32" size="4">POST</font></strong>:传输实体主体；<br><strong><font color="#9ACD32" size="4">PUT</font></strong>:传输文件，鉴于HTTP／1.1的PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的网站不建议使用该方法。若配合Web应用程序的验证机制，或架构设计采用REST标准的同类Web网站，就可能会开放使用PUT方法。<br><strong><font color="#9ACD32" size="4">HEAD</font></strong>:获得报文首部，和GET方法一样，只是不返回报文主体部分，用于确认URI的有效性及资源更新的日期时间等。<br><strong><font color="#9ACD32" size="4">DELETE</font></strong>:删除文件，和PUT方法一样不带验证机制。<br><strong><font color="#9ACD32" size="4">OPTIONS</font></strong>:用来查询针对请求URI指定的资源支持的方法。<br><strong><font color="#9ACD32" size="4">TRACE</font></strong>:追踪路径，客户端通过TRACE方法可以查询发送出去的请求是怎样被加工修改／篡改的。这是因为，想要连接到源目标服务器可能会通过代理中转，TRACE方法就是用来确认连接过程中发生的一系列操作。<br><strong><font color="#9ACD32" size="4">CONNECT</font></strong>: 要求用隧道协议连接代理。CONNECT方法在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL和TLS协议把通信内容经网络隧道传输。</li>
<li>持久连接节省通信量<br>在HTTP协议的初始版本中，每进行一次HTTP通信就要断开一次TCP连接。<br>假设这样的一个应用场景：使用浏览器请求一个包含多张图片的HTML页面时，在发送请求访问HTML页面资源的同时，也会请求该HTML里面包含的其他资源。因此，每次的请求都会造成无谓的TCP连接建立和断开，增加通信量的开销。</li>
</ul>
<p>为了解决上述TCP连接的问题，HTTP想出了持久连接（HTTP keep-alive）的方法。持久连接的特点是：只要任意一端没有明确提出断开连接，则保持TCP连接状态。<br>管线化   持久连接使得多数请求以管线化方式发送成为可能。从前发送请求后需要等待并收到响应后，才能发送下一个请求。管线化技术出现后，不用等待响应亦可直接发送下一个请求，这样就能够同时并行发送多个请求，而不需要一个接一个地等待响应了。</p>
<p><strong><font color="#9ACD32" size="4">HTTP是无状态协议</font></strong>，不对之前发送的请求和响应的状态进行管理。不可否认无状态协议当然也有它自己的优点。由于不保存状态，自然可减少服务器的CPU及内存资源的消耗。保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入了Cookie技术。Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。</p>
<h2 id="2-HTTP报文"><a href="#2-HTTP报文" class="headerlink" title="2. HTTP报文"></a>2. HTTP报文</h2><p>用于HTTP协议交互的信息被称为HTTP报文，客户端请求的报文称之为请求报文，服务端响应的报文称之为响应报文。HTTP报文大致可以分为<font color="#00ffff" size="4">报文首部</font>和<font color="#00ffff" size="4">报文主体</font>两部分。二者由最初出现的空行（CR＋LF）来划分。通常，并不一定要有报文主体。下面来看一下请求报文和响应报文的结构图：<br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E5%9B%BE2.jpg" alt="请求报文结构图"><br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E5%9B%BE1.jpg" alt="响应报文结构图"></p>
<h3 id="编码提升传输速率"><a href="#编码提升传输速率" class="headerlink" title="编码提升传输速率"></a>编码提升传输速率</h3><ul>
<li>gzip(GNU zip)</li>
<li>compress (Unix系统的标准压缩)</li>
<li>deflate(zlib)</li>
<li>identity(不进行编码)</li>
</ul>
<h3 id="分割发送的分块传输编码"><a href="#分割发送的分块传输编码" class="headerlink" title="分割发送的分块传输编码"></a>分割发送的分块传输编码</h3><h3 id="发送多种数据的多部分对象集合"><a href="#发送多种数据的多部分对象集合" class="headerlink" title="发送多种数据的多部分对象集合"></a>发送多种数据的多部分对象集合</h3><h3 id="获取部分内容的范围请求"><a href="#获取部分内容的范围请求" class="headerlink" title="获取部分内容的范围请求"></a>获取部分内容的范围请求</h3><p>在实现<font color="#9ACD32" size="4">断点续传</font>的功能的时候，就需要使用范围请求这个字段了。eg.Range: byte = 5001 - 10000</p>
<h2 id="3-返回结果的HTTP状态码"><a href="#3-返回结果的HTTP状态码" class="headerlink" title="3. 返回结果的HTTP状态码"></a>3. 返回结果的HTTP状态码</h2><ul>
<li>1XX 表示服务器已经接收了客户端请求，客户端可继续发送请求</li>
<li>2XX 请求正常处理完毕</li>
<li>3XX 需要进行附加操作以完成请求</li>
<li>4XX 表示客户端的请求有非法内容</li>
<li>5XX 服务器处理请求出错<br>下图为一些常用的状态码：<br><img src="http://7xt310.com1.z0.glb.clouddn.com/%E5%B8%B8%E7%94%A8%E7%8A%B6%E6%80%81%E7%A0%81.png" alt="常用的状态码"></li>
</ul>
<h2 id="4-与HTTP协作的Web服务器"><a href="#4-与HTTP协作的Web服务器" class="headerlink" title="4. 与HTTP协作的Web服务器"></a>4. 与HTTP协作的Web服务器</h2><h3 id="用单台虚拟主机实现多个域名"><a href="#用单台虚拟主机实现多个域名" class="headerlink" title="用单台虚拟主机实现多个域名"></a><strong>用单台虚拟主机实现多个域名</strong></h3><p>一台Web服务器可搭建多个独立域名的Web网站，也可作为通信路径上的中转服务器提升传输效率。如果我们在一台服务器上托管了两个域名，当收到请求时就需要弄清楚究竟要访问哪个域名，因此必须在Host首部内完整指定主机名或域名的URI。</p>
<h3 id="通信数据转发程序：代理、网关、隧道"><a href="#通信数据转发程序：代理、网关、隧道" class="headerlink" title="通信数据转发程序：代理、网关、隧道"></a><strong>通信数据转发程序：代理、网关、隧道</strong></h3><p>HTTP通信时，除客户端和服务器以外，还有一些用于通信数据转发的 <strong>应用程序和服务器</strong>，例如代理、网关和隧道，它们可以配合服务器工作。这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接收服务器返回的响应并转发给客户端。</p>
<ul>
<li><p><strong>代理:</strong> 是一种有转发功能的应用程序<br>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。<strong>代理不改变请求URI</strong> ，会直接转发给前方持有资源的目标服务器。<br><font color="#9ACD32" size="4">使用代理服务器的理由：利用缓存技术减少网络带宽的流量。</font><br>代理有多种使用方法，按两种基准分类。一类是 <strong>是否使用缓存</strong> ，另一种是 <strong>是否会修改报文</strong> 。<br>缓存代理：代理转发响应时，缓存代理会预先将资源的副本保存在代理服务器上，下次请求相同的资源时，则将之前缓存的资源作为响应返回。<br>透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理，否则称为非透明代理。</p>
</li>
<li><p><strong>网关:</strong> 是转发其他服务器通信数据的服务器<br>利用网关可以由HTTP请求转化为其他协议通信。<br>网关的工作机制和代理十分相似，而网关能使通信线路上的服务器提供非HTTP协议服务。</p>
</li>
<li><strong>隧道:</strong> 是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。<br>隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。隧道的目的是确保确保能与服务器进行安全通信，隧道本身不会解析HTTP请求，请求保持原样中转给之后的服务器。<h3 id="保存资源的缓存"><a href="#保存资源的缓存" class="headerlink" title="保存资源的缓存"></a><strong>保存资源的缓存</strong></h3>利用缓存可减少对源服务器的访问，可以节省通信流量和通信时间。<br>使用缓存的时候，要注意缓存的有效期限，确保我们发起请求获取的是最新的数据资源。</li>
</ul>
<h2 id="5-HTTP首部"><a href="#5-HTTP首部" class="headerlink" title="5. HTTP首部"></a>5. HTTP首部</h2><p>我们首先来看一下请求报文和响应报文到底长什么模样，下面的示例代码是通过Firefox插件Firebug来抓去的百度页面首部信息：</p>
<ul>
<li>请求报文</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">GET /his?wd=&amp;from=pc_web&amp;rf=3&amp;hisdata=&amp;json=1&amp;p=3&amp;sid=20740_20742_1424_18280_20417_17001_15840_11910_20744_20705&amp;csor=0&amp;cb=jQuery110206488567241711853_1469936513370&amp;_=1469936513371 HTTP/1.1</div><div class="line"></div><div class="line">Host: www.baidu.com</div><div class="line"></div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</div><div class="line"></div><div class="line">Accept: text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */／*; q=0.01</div><div class="line"></div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line"></div><div class="line">Accept-Encoding: gzip, deflate, br</div><div class="line"></div><div class="line">X-Requested-With: XMLHttpRequest</div><div class="line"></div><div class="line">Referer: https://www.baidu.com/</div><div class="line"></div><div class="line">Cookie: BAIDUID=DB24D5F4AB36694CF00C4877ADA56562:FG=1; BIDUPSID=DB24D5F4AB36694CF00C4877ADA56562; PSTM=1469936050; BDRCVFR[gltLrB7qNCt]=mk3SLVN4HKm; BD_CK_SAM=1; H_PS_PSSID=20740_20742_1424_18280_20417_17001_15840_11910_20744_20705; BD_UPN=133252; H_PS_645EC=96a0XJobAseSCdbn9%2FviULLD7KreCHN4V4HzQtcGacKF8tGu13Nzd6j9PoB2SPPVj1d5; BD_HOME=0; __bsi=11860814506529643127_00_0_I_R_25_0303_C02F_N_I_I_0</div><div class="line"></div><div class="line">Connection: keep-alive</div></pre></td></tr></table></figure>
<ul>
<li>响应报文</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</div><div class="line"></div><div class="line">Server: bfe/<span class="number">1.0</span><span class="number">.8</span><span class="number">.14</span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>: Sun, <span class="number">31</span> Jul <span class="number">2016</span> <span class="number">03</span>:<span class="number">41</span>:<span class="number">53</span> GMT</div><div class="line"></div><div class="line">Content-Type: baiduApp/json; v6<span class="number">.27</span><span class="number">.2</span><span class="number">.14</span>; charset=UTF<span class="number">-8</span></div><div class="line"></div><div class="line">Content-Length: <span class="number">95</span></div><div class="line"></div><div class="line">Connection: keep-alive</div><div class="line"></div><div class="line">Cache-Control: private</div><div class="line"></div><div class="line">Expires: Sun, <span class="number">31</span> Jul <span class="number">2016</span> <span class="number">04</span>:<span class="number">41</span>:<span class="number">53</span> GMT</div><div class="line"></div><div class="line"><span class="built_in">Set</span>-Cookie: __bsi=<span class="number">12018325985460509248</span>_00_0_I_R_4_0303_C02F_N_I_I_0; expires=Sun, <span class="number">31</span>-Jul<span class="number">-16</span> <span class="number">03</span>:<span class="number">41</span>:<span class="number">58</span> GMT; domain=www.baidu.com; path=<span class="regexp">/</span></div></pre></td></tr></table></figure>
<p>结合上面的HTTP报文结构图我们可以知道，两段代码的第一行分别对应请求行和响应行，下面则为首部字段。<br>通过首部字段的名字我们也可以知道，首部字段起着传递额外信息的重要作用，下面我们来简单了解一下HTTP首部字段：<br><img src="http://7xt310.com1.z0.glb.clouddn.com/HTTP%EF%BC%8F1.1%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5.png" alt="HTTP首部字段"></p>
<h2 id="6-确保Web安全的HTTPS"><a href="#6-确保Web安全的HTTPS" class="headerlink" title="6. 确保Web安全的HTTPS"></a>6. 确保Web安全的HTTPS</h2><p>通过上面的分析，我们了解到HTTP具有相当优秀和方便的一面，然而，HTTP并非只有好的一面，事物皆具两面性，主要存在以下几点不足：</p>
<ul>
<li>通信使用明文（不加密），内容可能会被窃听</li>
<li>不验证通信方的身份，因此有可能遭遇伪装</li>
<li>无法证明报文的完整性，所以有可能已遭篡改               </li>
</ul>
<p><strong><font color="#9ACD32" size="4">HTTP＋加密＋认证＋完整性保护＝HTTPS</font></strong><br>HTTPS并非是应用层的一种新协议。只是HTTP通信接口部分用SSL和TSL协议代替而已，通常，HTTP直接和TCP通信，当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信了。简言之，所谓HTTPS其实就是身披SSL协议这层外壳的HTTP。<br>当采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能。而且SSL协议是独立于HTTP的协议，所以不光是HTTP协议，其他运行在应用层的SMTP和Telnet等协议均可配合SSL协议使用。可以说SSL是当今世界上应用最为广泛的网络安全技术。</p>
<p>在讲解SSL之前我们需要首先了解一下加密方法，加密分为<font color="#9ACD32" size="4">对称加密</font>和<font color="#9ACD32" size="4">非对称加密</font>。HTTPS协议则是采用的两者混合的实现方式，为什么要结合两种的实现方式呢？这是因为它们都各自存在自己的优缺点。对于对称加密来说，密钥的传输交换是不安全的，但是效率比较高，而对于非对称加密，是不用担心传输的密钥安全性的问题的，因为我们传递的是公开密钥，任何人都可以获得，但是缺点是效率比较低。对于公钥私钥、数字签名，这个哥们已经总结的相当好了，可以参考一下这篇<a href="http://www.cnblogs.com/f1194361820/archive/2015/01/29/4260025.html" target="_blank" rel="external"><font color="#9ACD32" size="4">文章</font></a>。</p>
<h2 id="7-确认访问用户身份的认证"><a href="#7-确认访问用户身份的认证" class="headerlink" title="7. 确认访问用户身份的认证"></a>7. 确认访问用户身份的认证</h2><p><font color="#00ffff" size="4">何为认证？简单来说就是证明你是你自己！</font>核对的信息通常有密码、动态令牌、数字证书、生物认证、IC卡等信息。<br>HTTP／1.1使用的认证方式如下：</p>
<ul>
<li>BASIC认证（基本认证）</li>
<li>DIGEST认证（摘要认证）</li>
<li>SSL客户端认证</li>
<li>FormBase认证（基于表单认证）</li>
</ul>
<h2 id="8-基于HTTP的功能追加协议"><a href="#8-基于HTTP的功能追加协议" class="headerlink" title="8. 基于HTTP的功能追加协议"></a>8. 基于HTTP的功能追加协议</h2><p>待续…<br>下面将会整体做个总结，完整的说明HTTP的工作机制。</p>
<h1 id="三-后记"><a href="#三-后记" class="headerlink" title="三. 后记"></a>三. 后记</h1><p>本文是在阅读《图解HTTP》一书的基础上并同时参考一些优秀文章之后进行总结的，不仅整体认识了HTTP，也方便下次复习的时候，能够用更短的时间去理解这些虽然基础但是却很重要的知识。</p>
<h1 id="四：参考"><a href="#四：参考" class="headerlink" title="四：参考"></a>四：参考</h1><p><a href="http://www.cnblogs.com/jingmoxukong/p/5115055.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/5115055.html</a><br><a href="http://www.cnblogs.com/gaojing/archive/2012/02/04/2413626.html" target="_blank" rel="external">http://www.cnblogs.com/gaojing/archive/2012/02/04/2413626.html</a><br><a href="http://network.chinabyte.com/401/13238901.shtml" target="_blank" rel="external">http://network.chinabyte.com/401/13238901.shtml</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做网络编程（无论传统的Web开发，还是当前比较流行的的移动开发）的时候，我们用到最多的网络传输协议，可能就是HTTP协议了。作为开发者的我们可能更多的也只是去关注哪个第三方类库传输效率更高，哪个库使用最为方便，或者是哪个类库更为易于维护，但是，作为想要长期在该专业道路上行
    
    </summary>
    
      <category term="内功修养" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="HTTP协议" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="网络" scheme="http://akathink.com/categories/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/HTTP%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="内功修养" scheme="http://akathink.com/tags/%E5%86%85%E5%8A%9F%E4%BF%AE%E5%85%BB/"/>
    
      <category term="HTTP协议" scheme="http://akathink.com/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="网络协议" scheme="http://akathink.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
